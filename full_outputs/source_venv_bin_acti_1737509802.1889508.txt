/home/ubuntu/coser_bot/venv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:207: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
============================= test session starts ==============================
platform linux -- Python 3.12.8, pytest-8.3.4, pluggy-1.5.0 -- /home/ubuntu/coser_bot/venv/bin/python
cachedir: .pytest_cache
rootdir: /home/ubuntu/coser_bot
configfile: pyproject.toml
plugins: anyio-4.8.0, asyncio-0.25.2
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None
collected 11 items                                                             

tests/test_admin_auth.py::test_login PASSED                              [  9%]
tests/test_admin_auth.py::test_login ERROR                               [  9%]
tests/test_admin_auth.py::test_login_invalid_credentials FAILED          [ 18%]
tests/test_admin_auth.py::test_login_invalid_credentials ERROR           [ 18%]
tests/test_admin_auth.py::test_get_admin_info FAILED                     [ 27%]
tests/test_admin_auth.py::test_get_admin_info ERROR                      [ 27%]
tests/test_admin_auth.py::test_logout PASSED                             [ 36%]
tests/test_admin_auth.py::test_logout ERROR                              [ 36%]
tests/test_admin_endpoints.py::test_ban_user ERROR                       [ 45%]
tests/test_admin_endpoints.py::test_unban_user ERROR                     [ 54%]
tests/test_admin_endpoints.py::test_adjust_points ERROR                  [ 63%]
tests/test_admin_endpoints.py::test_get_user_stats ERROR                 [ 72%]
tests/test_group_management.py::test_mute_user FAILED                    [ 81%]
tests/test_group_management.py::test_unmute_user FAILED                  [ 90%]
tests/test_group_management.py::test_get_chat_member PASSED              [100%]

==================================== ERRORS ====================================
_______________________ ERROR at teardown of test_login ________________________

self = <sqlalchemy.engine.base.Connection object at 0x7ff5c59e1070>
dialect = <sqlalchemy.dialects.sqlite.aiosqlite.SQLiteDialect_aiosqlite object at 0x7ff5c6023080>
context = <sqlalchemy.dialects.sqlite.aiosqlite.SQLiteExecutionContext_aiosqlite object at 0x7ff5c5032690>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7ff5c5c796a0>
parameters = [(1,)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:942: in do_execute
    cursor.execute(statement, parameters)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:150: in execute
    self._adapt_connection._handle_exception(error)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:301: in _handle_exception
    raise error
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:132: in execute
    self.await_(_cursor.execute(operation, parameters))
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:132: in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:196: in greenlet_spawn
    value = await result
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:48: in execute
    await self._execute(self._cursor.execute, sql, parameters)
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:40: in _execute
    return await self._conn._execute(fn, *args, **kwargs)
venv/lib/python3.12/site-packages/aiosqlite/core.py:132: in _execute
    return await future
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Connection(Thread-1, started daemon 140693558462016)>

    def run(self) -> None:
        """
        Execute function calls on a separate thread.
    
        :meta private:
        """
        while True:
            # Continues running until all queue items are processed,
            # even after connection is closed (so we can finalize all
            # futures)
    
            tx_item = self._tx.get()
            if tx_item is _STOP_RUNNING_SENTINEL:
                break
    
            future, function = tx_item
    
            try:
                LOG.debug("executing %s", function)
>               result = function()
E               sqlite3.OperationalError: no such table: admin_users

venv/lib/python3.12/site-packages/aiosqlite/core.py:115: OperationalError

The above exception was the direct cause of the following exception:

test_db = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x7ff5c59e0a70>

    @pytest_asyncio.fixture
    async def test_admin(test_db):
        """创建测试管理员"""
        print("\n=== 创建测试管理员 ===")
    
        # 创建新管理员
        admin = AdminUser(
            username="test_admin",
            password_hash=Auth.get_password_hash("testpass123"),
            role=AdminRole.SUPERADMIN,
            is_active=True
        )
        test_db.add(admin)
        await test_db.commit()
        await test_db.refresh(admin)
        print(f"测试管理员已创建: ID={admin.id}, 用户名={admin.username}")
    
        yield admin
    
        # 清理测试数据
        await test_db.delete(admin)
>       await test_db.commit()

tests/test_admin_auth.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/ext/asyncio/session.py:1011: in commit
    await greenlet_spawn(self.sync_session.commit)
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
<string>:2: in commit
    ???
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
<string>:2: in _prepare_impl
    ???
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4353: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4488: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4449: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:679: in execute
    util.preloaded.orm_persistence.delete_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:193: in delete_obj
    _emit_delete_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1465: in _emit_delete_statements
    c = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context
    self.dialect.do_execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:942: in do_execute
    cursor.execute(statement, parameters)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:150: in execute
    self._adapt_connection._handle_exception(error)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:301: in _handle_exception
    raise error
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:132: in execute
    self.await_(_cursor.execute(operation, parameters))
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:132: in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:196: in greenlet_spawn
    value = await result
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:48: in execute
    await self._execute(self._cursor.execute, sql, parameters)
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:40: in _execute
    return await self._conn._execute(fn, *args, **kwargs)
venv/lib/python3.12/site-packages/aiosqlite/core.py:132: in _execute
    return await future
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Connection(Thread-1, started daemon 140693558462016)>

    def run(self) -> None:
        """
        Execute function calls on a separate thread.
    
        :meta private:
        """
        while True:
            # Continues running until all queue items are processed,
            # even after connection is closed (so we can finalize all
            # futures)
    
            tx_item = self._tx.get()
            if tx_item is _STOP_RUNNING_SENTINEL:
                break
    
            future, function = tx_item
    
            try:
                LOG.debug("executing %s", function)
>               result = function()
E               sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: admin_users
E               [SQL: DELETE FROM admin_users WHERE admin_users.id = ?]
E               [parameters: (1,)]
E               (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/aiosqlite/core.py:115: OperationalError
---------------------------- Captured stdout setup -----------------------------

=== 设置测试数据库 ===
2025-01-22 01:36:36,181 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:36,182 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:36:36,182 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:36,183 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:36:36,183 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:36,183 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:36:36,183 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:36,184 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:36:36,184 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:36,184 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:36:36,184 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:36,185 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:36:36,185 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:36,185 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:36:36,186 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:36,186 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:36:36,186 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:36,187 INFO sqlalchemy.engine.Engine 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


2025-01-22 01:36:36,187 INFO sqlalchemy.engine.Engine [no key 0.00014s] ()
2025-01-22 01:36:36,188 INFO sqlalchemy.engine.Engine 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


2025-01-22 01:36:36,188 INFO sqlalchemy.engine.Engine [no key 0.00009s] ()
2025-01-22 01:36:36,189 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


2025-01-22 01:36:36,189 INFO sqlalchemy.engine.Engine [no key 0.00009s] ()
2025-01-22 01:36:36,190 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


2025-01-22 01:36:36,190 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:36,190 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:36:36,192 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:36,192 INFO sqlalchemy.engine.Engine DELETE FROM admin_users
2025-01-22 01:36:36,192 INFO sqlalchemy.engine.Engine [generated in 0.00016s] ()
2025-01-22 01:36:36,193 INFO sqlalchemy.engine.Engine COMMIT

=== 创建测试管理员 ===
2025-01-22 01:36:36,477 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:36,479 INFO sqlalchemy.engine.Engine INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
2025-01-22 01:36:36,479 INFO sqlalchemy.engine.Engine [generated in 0.00017s] ('test_admin', '$2b$12$fl/7A92FmEVC3ZGRv9sQyuDZBM/h.VCGXA2.yudLVfasXhmMq26K2', 'SUPERADMIN', 1, None)
2025-01-22 01:36:36,481 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:36:36,482 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:36,484 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
2025-01-22 01:36:36,484 INFO sqlalchemy.engine.Engine [generated in 0.00013s] (1,)
测试管理员已创建: ID=1, 用户名=test_admin
------------------------------ Captured log setup ------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00014s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00009s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00009s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 DELETE FROM admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [generated in 0.00016s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
WARNING  passlib.handlers.bcrypt:bcrypt.py:622 (trapped) error reading bcrypt version
Traceback (most recent call last):
  File "/home/ubuntu/coser_bot/venv/lib/python3.12/site-packages/passlib/handlers/bcrypt.py", line 620, in _load_backend_mixin
    version = _bcrypt.__about__.__version__
              ^^^^^^^^^^^^^^^^^
AttributeError: module 'bcrypt' has no attribute '__about__'
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
INFO     sqlalchemy.engine.Engine:base.py:1843 [generated in 0.00017s] ('test_admin', '$2b$12$fl/7A92FmEVC3ZGRv9sQyuDZBM/h.VCGXA2.yudLVfasXhmMq26K2', 'SUPERADMIN', 1, None)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [generated in 0.00013s] (1,)
----------------------------- Captured stdout call -----------------------------

=== 测试管理员登录 ===
发送登录请求: {'username': 'test_admin', 'password': 'testpass123', 'grant_type': 'password'}
2025-01-22 01:36:36,497 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:36,497 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:36:36,497 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:36,498 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:36:36,498 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:36,498 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:36:36,498 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:36,499 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:36:36,499 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:36,500 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:36:36,500 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:36,501 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.username = ?
2025-01-22 01:36:36,501 INFO sqlalchemy.engine.Engine [generated in 0.00013s] ('test_admin',)
2025-01-22 01:36:36,765 INFO sqlalchemy.engine.Engine UPDATE admin_users SET last_login=? WHERE admin_users.id = ?
2025-01-22 01:36:36,765 INFO sqlalchemy.engine.Engine [generated in 0.00015s] ('2025-01-22 01:36:36.764626', 1)
2025-01-22 01:36:36,766 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:36:36,767 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:36,768 INFO sqlalchemy.engine.Engine INSERT INTO admin_logs (admin_id, action, target_type, target_id, details, ip_address) VALUES (?, ?, ?, ?, ?, ?) RETURNING id, created_at
2025-01-22 01:36:36,768 INFO sqlalchemy.engine.Engine [generated in 0.00015s] (1, 'login', 'admin', '1', '管理员登录成功', None)
2025-01-22 01:36:36,769 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:36:36,769 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:36,769 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:36:36,769 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:36,770 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:36:36,770 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:36,770 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:36:36,771 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:36,771 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:36:36,771 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:36,772 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_logs
2025-01-22 01:36:36,772 INFO sqlalchemy.engine.Engine [no key 0.00009s] ()
2025-01-22 01:36:36,772 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_users
2025-01-22 01:36:36,773 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:36,773 INFO sqlalchemy.engine.Engine 
DROP TABLE point_records
2025-01-22 01:36:36,773 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:36,774 INFO sqlalchemy.engine.Engine 
DROP TABLE users
2025-01-22 01:36:36,774 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:36,774 INFO sqlalchemy.engine.Engine COMMIT
登录响应状态码: 200
登录响应内容: {"access_token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwiZXhwIjoxNzM3NTExNTk2fQ.9KeeJlaA825v0UazjJYETL4pCKEVEivMHJsrquxOK7g","token_type":"bearer"}
------------------------------ Captured log call -------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.username = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [generated in 0.00013s] ('test_admin',)
INFO     sqlalchemy.engine.Engine:base.py:1843 UPDATE admin_users SET last_login=? WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [generated in 0.00015s] ('2025-01-22 01:36:36.764626', 1)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 INSERT INTO admin_logs (admin_id, action, target_type, target_id, details, ip_address) VALUES (?, ?, ?, ?, ?, ?) RETURNING id, created_at
INFO     sqlalchemy.engine.Engine:base.py:1843 [generated in 0.00015s] (1, 'login', 'admin', '1', '管理员登录成功', None)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_logs
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00009s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE point_records
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
--------------------------- Captured stdout teardown ---------------------------
2025-01-22 01:36:36,777 INFO sqlalchemy.engine.Engine DELETE FROM admin_users WHERE admin_users.id = ?
2025-01-22 01:36:36,777 INFO sqlalchemy.engine.Engine [generated in 0.00014s] (1,)
2025-01-22 01:36:36,777 INFO sqlalchemy.engine.Engine ROLLBACK

=== 清理测试数据库 ===
2025-01-22 01:36:36,779 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:36,780 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:36:36,780 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:36,780 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:36:36,780 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:36,781 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:36:36,781 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:36,781 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:36:36,782 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:36,782 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:36:36,782 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:36,783 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:36:36,783 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:36,783 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:36:36,783 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:36,784 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:36:36,784 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:36,784 INFO sqlalchemy.engine.Engine COMMIT
---------------------------- Captured log teardown -----------------------------
INFO     sqlalchemy.engine.Engine:base.py:1843 DELETE FROM admin_users WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [generated in 0.00014s] (1,)
INFO     sqlalchemy.engine.Engine:base.py:2702 ROLLBACK
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
_____________ ERROR at teardown of test_login_invalid_credentials ______________

self = <sqlalchemy.engine.base.Connection object at 0x7ff5c50e5880>
dialect = <sqlalchemy.dialects.sqlite.aiosqlite.SQLiteDialect_aiosqlite object at 0x7ff5c6023080>
context = <sqlalchemy.dialects.sqlite.aiosqlite.SQLiteExecutionContext_aiosqlite object at 0x7ff5c50e7a10>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7ff5c5c796a0>
parameters = [(1,)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:942: in do_execute
    cursor.execute(statement, parameters)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:150: in execute
    self._adapt_connection._handle_exception(error)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:301: in _handle_exception
    raise error
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:132: in execute
    self.await_(_cursor.execute(operation, parameters))
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:132: in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:196: in greenlet_spawn
    value = await result
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:48: in execute
    await self._execute(self._cursor.execute, sql, parameters)
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:40: in _execute
    return await self._conn._execute(fn, *args, **kwargs)
venv/lib/python3.12/site-packages/aiosqlite/core.py:132: in _execute
    return await future
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Connection(Thread-1, started daemon 140693558462016)>

    def run(self) -> None:
        """
        Execute function calls on a separate thread.
    
        :meta private:
        """
        while True:
            # Continues running until all queue items are processed,
            # even after connection is closed (so we can finalize all
            # futures)
    
            tx_item = self._tx.get()
            if tx_item is _STOP_RUNNING_SENTINEL:
                break
    
            future, function = tx_item
    
            try:
                LOG.debug("executing %s", function)
>               result = function()
E               sqlite3.OperationalError: no such table: admin_users

venv/lib/python3.12/site-packages/aiosqlite/core.py:115: OperationalError

The above exception was the direct cause of the following exception:

test_db = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x7ff5c50e4b90>

    @pytest_asyncio.fixture
    async def test_admin(test_db):
        """创建测试管理员"""
        print("\n=== 创建测试管理员 ===")
    
        # 创建新管理员
        admin = AdminUser(
            username="test_admin",
            password_hash=Auth.get_password_hash("testpass123"),
            role=AdminRole.SUPERADMIN,
            is_active=True
        )
        test_db.add(admin)
        await test_db.commit()
        await test_db.refresh(admin)
        print(f"测试管理员已创建: ID={admin.id}, 用户名={admin.username}")
    
        yield admin
    
        # 清理测试数据
        await test_db.delete(admin)
>       await test_db.commit()

tests/test_admin_auth.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/ext/asyncio/session.py:1011: in commit
    await greenlet_spawn(self.sync_session.commit)
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
<string>:2: in commit
    ???
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
<string>:2: in _prepare_impl
    ???
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4353: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4488: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4449: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:679: in execute
    util.preloaded.orm_persistence.delete_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:193: in delete_obj
    _emit_delete_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1465: in _emit_delete_statements
    c = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context
    self.dialect.do_execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:942: in do_execute
    cursor.execute(statement, parameters)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:150: in execute
    self._adapt_connection._handle_exception(error)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:301: in _handle_exception
    raise error
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:132: in execute
    self.await_(_cursor.execute(operation, parameters))
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:132: in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:196: in greenlet_spawn
    value = await result
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:48: in execute
    await self._execute(self._cursor.execute, sql, parameters)
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:40: in _execute
    return await self._conn._execute(fn, *args, **kwargs)
venv/lib/python3.12/site-packages/aiosqlite/core.py:132: in _execute
    return await future
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Connection(Thread-1, started daemon 140693558462016)>

    def run(self) -> None:
        """
        Execute function calls on a separate thread.
    
        :meta private:
        """
        while True:
            # Continues running until all queue items are processed,
            # even after connection is closed (so we can finalize all
            # futures)
    
            tx_item = self._tx.get()
            if tx_item is _STOP_RUNNING_SENTINEL:
                break
    
            future, function = tx_item
    
            try:
                LOG.debug("executing %s", function)
>               result = function()
E               sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: admin_users
E               [SQL: DELETE FROM admin_users WHERE admin_users.id = ?]
E               [parameters: (1,)]
E               (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/aiosqlite/core.py:115: OperationalError
---------------------------- Captured stdout setup -----------------------------

=== 设置测试数据库 ===
2025-01-22 01:36:37,246 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:37,247 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:36:37,247 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,248 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:36:37,248 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,248 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:36:37,248 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,249 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:36:37,249 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,249 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:36:37,250 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,250 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:36:37,250 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,251 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:36:37,251 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,251 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:36:37,251 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,252 INFO sqlalchemy.engine.Engine 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


2025-01-22 01:36:37,252 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:37,253 INFO sqlalchemy.engine.Engine 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


2025-01-22 01:36:37,253 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:37,254 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


2025-01-22 01:36:37,254 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:37,255 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


2025-01-22 01:36:37,255 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:37,255 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:36:37,256 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:37,256 INFO sqlalchemy.engine.Engine DELETE FROM admin_users
2025-01-22 01:36:37,256 INFO sqlalchemy.engine.Engine [cached since 1.064s ago] ()
2025-01-22 01:36:37,257 INFO sqlalchemy.engine.Engine COMMIT

=== 创建测试管理员 ===
2025-01-22 01:36:37,528 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:37,529 INFO sqlalchemy.engine.Engine INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
2025-01-22 01:36:37,529 INFO sqlalchemy.engine.Engine [cached since 1.05s ago] ('test_admin', '$2b$12$WghAKfo49zTCQCxuIc6ty.G8K4D1gr9x0fCUoR3fHhJFPy0DzA2R2', 'SUPERADMIN', 1, None)
2025-01-22 01:36:37,530 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:36:37,530 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:37,531 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
2025-01-22 01:36:37,531 INFO sqlalchemy.engine.Engine [cached since 1.047s ago] (1,)
测试管理员已创建: ID=1, 用户名=test_admin
------------------------------ Captured log setup ------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 DELETE FROM admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.064s ago] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.05s ago] ('test_admin', '$2b$12$WghAKfo49zTCQCxuIc6ty.G8K4D1gr9x0fCUoR3fHhJFPy0DzA2R2', 'SUPERADMIN', 1, None)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.047s ago] (1,)
----------------------------- Captured stdout call -----------------------------

=== 测试无效凭据登录 ===
发送无效凭据登录请求
2025-01-22 01:36:37,536 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:37,536 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:36:37,536 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,537 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:36:37,537 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,538 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:36:37,538 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,538 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:36:37,538 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,539 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:36:37,540 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:37,540 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.username = ?
2025-01-22 01:36:37,540 INFO sqlalchemy.engine.Engine [cached since 1.039s ago] ('test_admin',)
2025-01-22 01:36:37,805 INFO sqlalchemy.engine.Engine ROLLBACK
2025-01-22 01:36:37,806 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:37,806 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:36:37,806 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,806 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:36:37,807 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,807 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:36:37,807 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,808 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:36:37,808 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,809 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_logs
2025-01-22 01:36:37,809 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:37,809 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_users
2025-01-22 01:36:37,809 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:37,810 INFO sqlalchemy.engine.Engine 
DROP TABLE point_records
2025-01-22 01:36:37,810 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:36:37,810 INFO sqlalchemy.engine.Engine 
DROP TABLE users
2025-01-22 01:36:37,810 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:37,811 INFO sqlalchemy.engine.Engine COMMIT
登录响应状态码: 401
登录响应内容: {"detail":"用户名或密码错误"}
------------------------------ Captured log call -------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.username = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.039s ago] ('test_admin',)
INFO     sqlalchemy.engine.Engine:base.py:2702 ROLLBACK
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_logs
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE point_records
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
--------------------------- Captured stdout teardown ---------------------------
2025-01-22 01:36:37,817 INFO sqlalchemy.engine.Engine DELETE FROM admin_users WHERE admin_users.id = ?
2025-01-22 01:36:37,817 INFO sqlalchemy.engine.Engine [cached since 1.041s ago] (1,)
2025-01-22 01:36:37,818 INFO sqlalchemy.engine.Engine ROLLBACK

=== 清理测试数据库 ===
2025-01-22 01:36:37,819 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:37,819 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:36:37,819 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,819 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:36:37,820 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,820 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:36:37,820 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,821 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:36:37,821 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,821 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:36:37,821 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,822 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:36:37,822 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,823 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:36:37,823 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,823 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:36:37,823 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,824 INFO sqlalchemy.engine.Engine COMMIT
---------------------------- Captured log teardown -----------------------------
INFO     sqlalchemy.engine.Engine:base.py:1843 DELETE FROM admin_users WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.041s ago] (1,)
INFO     sqlalchemy.engine.Engine:base.py:2702 ROLLBACK
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
___________________ ERROR at teardown of test_get_admin_info ___________________

self = <sqlalchemy.engine.base.Connection object at 0x7ff5c45e54f0>
dialect = <sqlalchemy.dialects.sqlite.aiosqlite.SQLiteDialect_aiosqlite object at 0x7ff5c6023080>
context = <sqlalchemy.dialects.sqlite.aiosqlite.SQLiteExecutionContext_aiosqlite object at 0x7ff5c51111c0>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7ff5c5c796a0>
parameters = [(1,)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:942: in do_execute
    cursor.execute(statement, parameters)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:150: in execute
    self._adapt_connection._handle_exception(error)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:301: in _handle_exception
    raise error
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:132: in execute
    self.await_(_cursor.execute(operation, parameters))
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:132: in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:196: in greenlet_spawn
    value = await result
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:48: in execute
    await self._execute(self._cursor.execute, sql, parameters)
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:40: in _execute
    return await self._conn._execute(fn, *args, **kwargs)
venv/lib/python3.12/site-packages/aiosqlite/core.py:132: in _execute
    return await future
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Connection(Thread-1, started daemon 140693558462016)>

    def run(self) -> None:
        """
        Execute function calls on a separate thread.
    
        :meta private:
        """
        while True:
            # Continues running until all queue items are processed,
            # even after connection is closed (so we can finalize all
            # futures)
    
            tx_item = self._tx.get()
            if tx_item is _STOP_RUNNING_SENTINEL:
                break
    
            future, function = tx_item
    
            try:
                LOG.debug("executing %s", function)
>               result = function()
E               sqlite3.OperationalError: no such table: admin_users

venv/lib/python3.12/site-packages/aiosqlite/core.py:115: OperationalError

The above exception was the direct cause of the following exception:

test_db = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x7ff5c45e4f50>

    @pytest_asyncio.fixture
    async def test_admin(test_db):
        """创建测试管理???"""
        print("\n=== 创建测试管理员 ===")
    
        # 创建新管理员
        admin = AdminUser(
            username="test_admin",
            password_hash=Auth.get_password_hash("testpass123"),
            role=AdminRole.SUPERADMIN,
            is_active=True
        )
        test_db.add(admin)
        await test_db.commit()
        await test_db.refresh(admin)
        print(f"测试管理员已创建: ID={admin.id}, 用户名={admin.username}")
    
        yield admin
    
        # 清理测试数据
        await test_db.delete(admin)
>       await test_db.commit()

tests/test_admin_auth.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/ext/asyncio/session.py:1011: in commit
    await greenlet_spawn(self.sync_session.commit)
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
<string>:2: in commit
    ???
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
<string>:2: in _prepare_impl
    ???
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4353: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4488: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4449: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:679: in execute
    util.preloaded.orm_persistence.delete_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:193: in delete_obj
    _emit_delete_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1465: in _emit_delete_statements
    c = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context
    self.dialect.do_execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:942: in do_execute
    cursor.execute(statement, parameters)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:150: in execute
    self._adapt_connection._handle_exception(error)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:301: in _handle_exception
    raise error
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:132: in execute
    self.await_(_cursor.execute(operation, parameters))
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:132: in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:196: in greenlet_spawn
    value = await result
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:48: in execute
    await self._execute(self._cursor.execute, sql, parameters)
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:40: in _execute
    return await self._conn._execute(fn, *args, **kwargs)
venv/lib/python3.12/site-packages/aiosqlite/core.py:132: in _execute
    return await future
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Connection(Thread-1, started daemon 140693558462016)>

    def run(self) -> None:
        """
        Execute function calls on a separate thread.
    
        :meta private:
        """
        while True:
            # Continues running until all queue items are processed,
            # even after connection is closed (so we can finalize all
            # futures)
    
            tx_item = self._tx.get()
            if tx_item is _STOP_RUNNING_SENTINEL:
                break
    
            future, function = tx_item
    
            try:
                LOG.debug("executing %s", function)
>               result = function()
E               sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: admin_users
E               [SQL: DELETE FROM admin_users WHERE admin_users.id = ?]
E               [parameters: (1,)]
E               (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/aiosqlite/core.py:115: OperationalError
---------------------------- Captured stdout setup -----------------------------

=== 设置测试数据库 ===
2025-01-22 01:36:38,214 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:38,215 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:36:38,215 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,215 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:36:38,216 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,216 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:36:38,216 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,217 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:36:38,217 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,217 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:36:38,217 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,218 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:36:38,218 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,218 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:36:38,218 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,219 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:36:38,219 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,220 INFO sqlalchemy.engine.Engine 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


2025-01-22 01:36:38,220 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:38,220 INFO sqlalchemy.engine.Engine 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


2025-01-22 01:36:38,220 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:36:38,221 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


2025-01-22 01:36:38,221 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:36:38,222 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


2025-01-22 01:36:38,222 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:36:38,222 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:36:38,223 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:38,223 INFO sqlalchemy.engine.Engine DELETE FROM admin_users
2025-01-22 01:36:38,223 INFO sqlalchemy.engine.Engine [cached since 2.031s ago] ()
2025-01-22 01:36:38,224 INFO sqlalchemy.engine.Engine COMMIT

=== 创建测试管理员 ===
2025-01-22 01:36:38,475 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:38,475 INFO sqlalchemy.engine.Engine INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
2025-01-22 01:36:38,475 INFO sqlalchemy.engine.Engine [cached since 1.996s ago] ('test_admin', '$2b$12$kOtQ2OC2/1onjVN7yz0Cn.HTlQL9m42haXsSiLWLtH7BjYoq2C1py', 'SUPERADMIN', 1, None)
2025-01-22 01:36:38,476 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:36:38,476 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:38,477 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
2025-01-22 01:36:38,477 INFO sqlalchemy.engine.Engine [cached since 1.993s ago] (1,)
测试管理员已创建: ID=1, 用户名=test_admin
------------------------------ Captured log setup ------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 DELETE FROM admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 2.031s ago] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.996s ago] ('test_admin', '$2b$12$kOtQ2OC2/1onjVN7yz0Cn.HTlQL9m42haXsSiLWLtH7BjYoq2C1py', 'SUPERADMIN', 1, None)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.993s ago] (1,)
----------------------------- Captured stdout call -----------------------------

=== 开始测试获取管理员信息 ===
测试管理员ID: 1
测试管理员用户名: test_admin

尝试登录...
2025-01-22 01:36:38,481 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:38,482 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:36:38,482 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,482 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:36:38,482 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,483 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:36:38,483 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,483 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:36:38,483 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,484 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:36:38,484 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:38,485 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.username = ?
2025-01-22 01:36:38,485 INFO sqlalchemy.engine.Engine [cached since 1.984s ago] ('test_admin',)
2025-01-22 01:36:38,751 INFO sqlalchemy.engine.Engine UPDATE admin_users SET last_login=? WHERE admin_users.id = ?
2025-01-22 01:36:38,751 INFO sqlalchemy.engine.Engine [cached since 1.986s ago] ('2025-01-22 01:36:38.750790', 1)
2025-01-22 01:36:38,751 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:36:38,752 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:38,752 INFO sqlalchemy.engine.Engine INSERT INTO admin_logs (admin_id, action, target_type, target_id, details, ip_address) VALUES (?, ?, ?, ?, ?, ?) RETURNING id, created_at
2025-01-22 01:36:38,752 INFO sqlalchemy.engine.Engine [cached since 1.985s ago] (1, 'login', 'admin', '1', '管理员登录成功', None)
2025-01-22 01:36:38,753 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:36:38,753 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:38,754 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:36:38,754 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,754 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:36:38,754 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,755 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:36:38,755 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,756 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:36:38,756 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,756 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_logs
2025-01-22 01:36:38,756 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:38,757 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_users
2025-01-22 01:36:38,757 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:36:38,757 INFO sqlalchemy.engine.Engine 
DROP TABLE point_records
2025-01-22 01:36:38,757 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:38,758 INFO sqlalchemy.engine.Engine 
DROP TABLE users
2025-01-22 01:36:38,758 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:36:38,759 INFO sqlalchemy.engine.Engine COMMIT
登录响应状态码: 200
登录响应内容: {'access_token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwiZXhwIjoxNzM3NTExNTk4fQ.Y_wP5wjkdEJQVja1fv3xQzrpO4RUW_Z0uCtVRQ4Fbek', 'token_type': 'bearer'}
获取到的令牌: eyJhbGciOiJIUzI1NiIs...

尝试获取管理员信息...
2025-01-22 01:36:38,760 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:38,760 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:36:38,760 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,761 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:36:38,761 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,762 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:36:38,762 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,762 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:36:38,762 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,763 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:36:38,763 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,763 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:36:38,763 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,764 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:36:38,764 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,765 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:36:38,765 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,766 INFO sqlalchemy.engine.Engine 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


2025-01-22 01:36:38,766 INFO sqlalchemy.engine.Engine [no key 0.00009s] ()
2025-01-22 01:36:38,766 INFO sqlalchemy.engine.Engine 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


2025-01-22 01:36:38,766 INFO sqlalchemy.engine.Engine [no key 0.00011s] ()
2025-01-22 01:36:38,767 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


2025-01-22 01:36:38,767 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:38,768 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


2025-01-22 01:36:38,768 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:38,768 INFO sqlalchemy.engine.Engine COMMIT

=== 验证管理员令牌 ===
令牌: eyJhbGciOiJIUzI1NiIs...
开始验证令牌...
解析的管理员ID: 1
查询管理员信息...
2025-01-22 01:36:38,769 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:38,770 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
2025-01-22 01:36:38,770 INFO sqlalchemy.engine.Engine [generated in 0.00013s] (1,)
未找到管理员: ID=1
2025-01-22 01:36:38,771 INFO sqlalchemy.engine.Engine ROLLBACK
2025-01-22 01:36:38,771 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:38,771 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:36:38,771 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,772 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:36:38,772 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,773 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:36:38,773 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,773 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:36:38,773 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,774 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_logs
2025-01-22 01:36:38,774 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:38,774 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_users
2025-01-22 01:36:38,775 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:38,775 INFO sqlalchemy.engine.Engine 
DROP TABLE point_records
2025-01-22 01:36:38,775 INFO sqlalchemy.engine.Engine [no key 0.00017s] ()
2025-01-22 01:36:38,776 INFO sqlalchemy.engine.Engine 
DROP TABLE users
2025-01-22 01:36:38,776 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:36:38,776 INFO sqlalchemy.engine.Engine COMMIT
获取信息响应状态码: 401
错误响应: {'detail': '无效的认证凭据'}
------------------------------ Captured log call -------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.username = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.984s ago] ('test_admin',)
INFO     sqlalchemy.engine.Engine:base.py:1843 UPDATE admin_users SET last_login=? WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.986s ago] ('2025-01-22 01:36:38.750790', 1)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 INSERT INTO admin_logs (admin_id, action, target_type, target_id, details, ip_address) VALUES (?, ?, ?, ?, ?, ?) RETURNING id, created_at
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.985s ago] (1, 'login', 'admin', '1', '管理员登录成功', None)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_logs
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE point_records
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00009s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00011s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [generated in 0.00013s] (1,)
INFO     sqlalchemy.engine.Engine:base.py:2702 ROLLBACK
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_logs
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE point_records
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00017s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
--------------------------- Captured stdout teardown ---------------------------
2025-01-22 01:36:38,783 INFO sqlalchemy.engine.Engine DELETE FROM admin_users WHERE admin_users.id = ?
2025-01-22 01:36:38,783 INFO sqlalchemy.engine.Engine [cached since 2.006s ago] (1,)
2025-01-22 01:36:38,783 INFO sqlalchemy.engine.Engine ROLLBACK

=== 清理测试数据库 ===
2025-01-22 01:36:38,784 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:38,784 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:36:38,784 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,785 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:36:38,785 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,785 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:36:38,785 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,786 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:36:38,786 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,786 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:36:38,786 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,787 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:36:38,787 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,788 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:36:38,788 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,788 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:36:38,788 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,789 INFO sqlalchemy.engine.Engine COMMIT
---------------------------- Captured log teardown -----------------------------
INFO     sqlalchemy.engine.Engine:base.py:1843 DELETE FROM admin_users WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 2.006s ago] (1,)
INFO     sqlalchemy.engine.Engine:base.py:2702 ROLLBACK
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
_______________________ ERROR at teardown of test_logout _______________________

self = <sqlalchemy.engine.base.Connection object at 0x7ff5c45e7380>
dialect = <sqlalchemy.dialects.sqlite.aiosqlite.SQLiteDialect_aiosqlite object at 0x7ff5c6023080>
context = <sqlalchemy.dialects.sqlite.aiosqlite.SQLiteExecutionContext_aiosqlite object at 0x7ff5c467ce30>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7ff5c5c796a0>
parameters = [(1,)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:942: in do_execute
    cursor.execute(statement, parameters)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:150: in execute
    self._adapt_connection._handle_exception(error)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:301: in _handle_exception
    raise error
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:132: in execute
    self.await_(_cursor.execute(operation, parameters))
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:132: in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:196: in greenlet_spawn
    value = await result
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:48: in execute
    await self._execute(self._cursor.execute, sql, parameters)
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:40: in _execute
    return await self._conn._execute(fn, *args, **kwargs)
venv/lib/python3.12/site-packages/aiosqlite/core.py:132: in _execute
    return await future
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Connection(Thread-1, started daemon 140693558462016)>

    def run(self) -> None:
        """
        Execute function calls on a separate thread.
    
        :meta private:
        """
        while True:
            # Continues running until all queue items are processed,
            # even after connection is closed (so we can finalize all
            # futures)
    
            tx_item = self._tx.get()
            if tx_item is _STOP_RUNNING_SENTINEL:
                break
    
            future, function = tx_item
    
            try:
                LOG.debug("executing %s", function)
>               result = function()
E               sqlite3.OperationalError: no such table: admin_users

venv/lib/python3.12/site-packages/aiosqlite/core.py:115: OperationalError

The above exception was the direct cause of the following exception:

test_db = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x7ff5c45e7500>

    @pytest_asyncio.fixture
    async def test_admin(test_db):
        """创建测试管理员"""
        print("\n=== 创建测试管理员 ===")
    
        # 创建新管理员
        admin = AdminUser(
            username="test_admin",
            password_hash=Auth.get_password_hash("testpass123"),
            role=AdminRole.SUPERADMIN,
            is_active=True
        )
        test_db.add(admin)
        await test_db.commit()
        await test_db.refresh(admin)
        print(f"测试管理员已创建: ID={admin.id}, 用户名={admin.username}")
    
        yield admin
    
        # 清理测试数据
        await test_db.delete(admin)
>       await test_db.commit()

tests/test_admin_auth.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/ext/asyncio/session.py:1011: in commit
    await greenlet_spawn(self.sync_session.commit)
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
<string>:2: in commit
    ???
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
<string>:2: in _prepare_impl
    ???
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4353: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4488: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4449: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:679: in execute
    util.preloaded.orm_persistence.delete_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:193: in delete_obj
    _emit_delete_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1465: in _emit_delete_statements
    c = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context
    self.dialect.do_execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:942: in do_execute
    cursor.execute(statement, parameters)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:150: in execute
    self._adapt_connection._handle_exception(error)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:301: in _handle_exception
    raise error
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:132: in execute
    self.await_(_cursor.execute(operation, parameters))
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:132: in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:196: in greenlet_spawn
    value = await result
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:48: in execute
    await self._execute(self._cursor.execute, sql, parameters)
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:40: in _execute
    return await self._conn._execute(fn, *args, **kwargs)
venv/lib/python3.12/site-packages/aiosqlite/core.py:132: in _execute
    return await future
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Connection(Thread-1, started daemon 140693558462016)>

    def run(self) -> None:
        """
        Execute function calls on a separate thread.
    
        :meta private:
        """
        while True:
            # Continues running until all queue items are processed,
            # even after connection is closed (so we can finalize all
            # futures)
    
            tx_item = self._tx.get()
            if tx_item is _STOP_RUNNING_SENTINEL:
                break
    
            future, function = tx_item
    
            try:
                LOG.debug("executing %s", function)
>               result = function()
E               sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: admin_users
E               [SQL: DELETE FROM admin_users WHERE admin_users.id = ?]
E               [parameters: (1,)]
E               (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/aiosqlite/core.py:115: OperationalError
---------------------------- Captured stdout setup -----------------------------

=== 设置测试数据库 ===
2025-01-22 01:36:39,185 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:39,185 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:36:39,185 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,186 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:36:39,186 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,187 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:36:39,187 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,187 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:36:39,187 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,188 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:36:39,188 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,189 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:36:39,189 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,189 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:36:39,189 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,190 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:36:39,190 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,191 INFO sqlalchemy.engine.Engine 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


2025-01-22 01:36:39,191 INFO sqlalchemy.engine.Engine [no key 0.00009s] ()
2025-01-22 01:36:39,192 INFO sqlalchemy.engine.Engine 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


2025-01-22 01:36:39,192 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:39,193 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


2025-01-22 01:36:39,193 INFO sqlalchemy.engine.Engine [no key 0.00009s] ()
2025-01-22 01:36:39,194 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


2025-01-22 01:36:39,194 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:39,194 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:36:39,195 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:39,196 INFO sqlalchemy.engine.Engine DELETE FROM admin_users
2025-01-22 01:36:39,196 INFO sqlalchemy.engine.Engine [cached since 3.003s ago] ()
2025-01-22 01:36:39,196 INFO sqlalchemy.engine.Engine COMMIT

=== 创建测试管理员 ===
2025-01-22 01:36:39,459 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:39,460 INFO sqlalchemy.engine.Engine INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
2025-01-22 01:36:39,460 INFO sqlalchemy.engine.Engine [cached since 2.981s ago] ('test_admin', '$2b$12$qJvW4b.0IhjfCmPLRz8HveWmccJwyyYc7iGyoatzUpwdi.fDkDVkq', 'SUPERADMIN', 1, None)
2025-01-22 01:36:39,461 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:36:39,461 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:39,461 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
2025-01-22 01:36:39,462 INFO sqlalchemy.engine.Engine [cached since 2.978s ago] (1,)
测试管理员已创建: ID=1, 用户名=test_admin
------------------------------ Captured log setup ------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00009s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00009s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 DELETE FROM admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 3.003s ago] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 2.981s ago] ('test_admin', '$2b$12$qJvW4b.0IhjfCmPLRz8HveWmccJwyyYc7iGyoatzUpwdi.fDkDVkq', 'SUPERADMIN', 1, None)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 2.978s ago] (1,)
----------------------------- Captured stdout call -----------------------------
2025-01-22 01:36:39,466 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:39,467 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:36:39,467 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,467 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:36:39,467 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,468 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:36:39,468 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,469 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:36:39,469 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,469 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:36:39,470 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:39,470 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.username = ?
2025-01-22 01:36:39,470 INFO sqlalchemy.engine.Engine [cached since 2.969s ago] ('test_admin',)
2025-01-22 01:36:39,724 INFO sqlalchemy.engine.Engine UPDATE admin_users SET last_login=? WHERE admin_users.id = ?
2025-01-22 01:36:39,724 INFO sqlalchemy.engine.Engine [cached since 2.959s ago] ('2025-01-22 01:36:39.723922', 1)
2025-01-22 01:36:39,724 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:36:39,725 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:39,725 INFO sqlalchemy.engine.Engine INSERT INTO admin_logs (admin_id, action, target_type, target_id, details, ip_address) VALUES (?, ?, ?, ?, ?, ?) RETURNING id, created_at
2025-01-22 01:36:39,725 INFO sqlalchemy.engine.Engine [cached since 2.958s ago] (1, 'login', 'admin', '1', '管理员登录成功', None)
2025-01-22 01:36:39,726 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:36:39,727 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:39,727 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:36:39,727 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,727 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:36:39,727 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,728 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:36:39,728 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,729 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:36:39,729 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,729 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_logs
2025-01-22 01:36:39,729 INFO sqlalchemy.engine.Engine [no key 0.00010s] ()
2025-01-22 01:36:39,730 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_users
2025-01-22 01:36:39,730 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:36:39,730 INFO sqlalchemy.engine.Engine 
DROP TABLE point_records
2025-01-22 01:36:39,730 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:36:39,731 INFO sqlalchemy.engine.Engine 
DROP TABLE users
2025-01-22 01:36:39,731 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:36:39,731 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:36:39,733 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:39,734 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:36:39,734 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,734 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:36:39,734 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,735 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:36:39,735 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,736 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:36:39,736 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,736 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:36:39,736 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,737 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:36:39,737 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,737 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:36:39,737 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,738 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:36:39,738 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,739 INFO sqlalchemy.engine.Engine 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


2025-01-22 01:36:39,739 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:39,739 INFO sqlalchemy.engine.Engine 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


2025-01-22 01:36:39,739 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:36:39,740 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


2025-01-22 01:36:39,740 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:36:39,741 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


2025-01-22 01:36:39,741 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:39,742 INFO sqlalchemy.engine.Engine COMMIT

=== 验证管理员令牌 ===
令牌: eyJhbGciOiJIUzI1NiIs...
令牌在黑名单中
2025-01-22 01:36:39,742 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:39,742 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:36:39,742 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,743 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:36:39,743 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,744 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:36:39,744 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,744 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:36:39,745 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,745 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_logs
2025-01-22 01:36:39,745 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:36:39,746 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_users
2025-01-22 01:36:39,746 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:36:39,746 INFO sqlalchemy.engine.Engine 
DROP TABLE point_records
2025-01-22 01:36:39,746 INFO sqlalchemy.engine.Engine [no key 0.00010s] ()
2025-01-22 01:36:39,747 INFO sqlalchemy.engine.Engine 
DROP TABLE users
2025-01-22 01:36:39,747 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:36:39,747 INFO sqlalchemy.engine.Engine COMMIT
------------------------------ Captured log call -------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.username = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 2.969s ago] ('test_admin',)
INFO     sqlalchemy.engine.Engine:base.py:1843 UPDATE admin_users SET last_login=? WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 2.959s ago] ('2025-01-22 01:36:39.723922', 1)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 INSERT INTO admin_logs (admin_id, action, target_type, target_id, details, ip_address) VALUES (?, ?, ?, ?, ?, ?) RETURNING id, created_at
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 2.958s ago] (1, 'login', 'admin', '1', '管理员登录成功', None)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_logs
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00010s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE point_records
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_logs
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE point_records
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00010s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
--------------------------- Captured stdout teardown ---------------------------
2025-01-22 01:36:39,749 INFO sqlalchemy.engine.Engine DELETE FROM admin_users WHERE admin_users.id = ?
2025-01-22 01:36:39,749 INFO sqlalchemy.engine.Engine [cached since 2.972s ago] (1,)
2025-01-22 01:36:39,749 INFO sqlalchemy.engine.Engine ROLLBACK

=== 清理测试数据库 ===
2025-01-22 01:36:39,750 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:39,750 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:36:39,750 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,751 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:36:39,751 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,751 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:36:39,751 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,752 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:36:39,752 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,752 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:36:39,752 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,753 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:36:39,753 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,753 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:36:39,753 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,754 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:36:39,754 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:39,755 INFO sqlalchemy.engine.Engine COMMIT
---------------------------- Captured log teardown -----------------------------
INFO     sqlalchemy.engine.Engine:base.py:1843 DELETE FROM admin_users WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 2.972s ago] (1,)
INFO     sqlalchemy.engine.Engine:base.py:2702 ROLLBACK
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
_______________________ ERROR at setup of test_ban_user ________________________
ScopeMismatch: You tried to access the function scoped fixture test_db with a session scoped request object. Requesting fixture stack:
tests/test_admin_endpoints.py:87:  def admin_token(test_db, test_admin)
Requested fixture:
tests/test_admin_endpoints.py:41:  def test_db()
______________________ ERROR at setup of test_unban_user _______________________
ScopeMismatch: You tried to access the function scoped fixture test_db with a session scoped request object. Requesting fixture stack:
tests/test_admin_endpoints.py:87:  def admin_token(test_db, test_admin)
Requested fixture:
tests/test_admin_endpoints.py:41:  def test_db()
_____________________ ERROR at setup of test_adjust_points _____________________
ScopeMismatch: You tried to access the function scoped fixture test_db with a session scoped request object. Requesting fixture stack:
tests/test_admin_endpoints.py:87:  def admin_token(test_db, test_admin)
Requested fixture:
tests/test_admin_endpoints.py:41:  def test_db()
____________________ ERROR at setup of test_get_user_stats _____________________
ScopeMismatch: You tried to access the function scoped fixture test_db with a session scoped request object. Requesting fixture stack:
tests/test_admin_endpoints.py:87:  def admin_token(test_db, test_admin)
Requested fixture:
tests/test_admin_endpoints.py:41:  def test_db()
=================================== FAILURES ===================================
________________________ test_login_invalid_credentials ________________________

client = <httpx.AsyncClient object at 0x7ff5c59e0740>
test_db = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x7ff5c50e4b90>
test_admin = <app.models.admin.AdminUser object at 0x7ff5c50e4da0>

    @pytest.mark.asyncio
    async def test_login_invalid_credentials(client, test_db, test_admin):
        """测试无效凭据登录"""
        print("\n=== 测试无效凭据登录 ===")
    
        headers = {
            "Content-Type": "application/x-www-form-urlencoded"
        }
    
        form_data = {
            "username": "test_admin",
            "password": "wrongpass",
            "grant_type": "password"
        }
    
        print(f"发送无效凭据登录请求")
        response = await client.post(
            "/admin/login",
            headers=headers,
            data=form_data
        )
    
        print(f"登录响应状态码: {response.status_code}")
        print(f"登录响应内容: {response.text}")
    
        assert response.status_code == 401, "预期应该返回401未授权错误"
>       assert "无效的认证凭据" in response.text, "错误消息不符合预期"
E       AssertionError: 错误消息不符合预期
E       assert '无效的认证凭据' in '{"detail":"用户名或密码错误"}'
E        +  where '{"detail":"用户名或密码错误"}' = <Response [401 Unauthorized]>.text

tests/test_admin_auth.py:170: AssertionError
---------------------------- Captured stdout setup -----------------------------

=== 设置测试数据库 ===
2025-01-22 01:36:37,246 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:37,247 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:36:37,247 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,248 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:36:37,248 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,248 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:36:37,248 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,249 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:36:37,249 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,249 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:36:37,250 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,250 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:36:37,250 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,251 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:36:37,251 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,251 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:36:37,251 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,252 INFO sqlalchemy.engine.Engine 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


2025-01-22 01:36:37,252 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:37,253 INFO sqlalchemy.engine.Engine 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


2025-01-22 01:36:37,253 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:37,254 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


2025-01-22 01:36:37,254 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:37,255 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


2025-01-22 01:36:37,255 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:37,255 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:36:37,256 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:37,256 INFO sqlalchemy.engine.Engine DELETE FROM admin_users
2025-01-22 01:36:37,256 INFO sqlalchemy.engine.Engine [cached since 1.064s ago] ()
2025-01-22 01:36:37,257 INFO sqlalchemy.engine.Engine COMMIT

=== 创建测试管理员 ===
2025-01-22 01:36:37,528 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:37,529 INFO sqlalchemy.engine.Engine INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
2025-01-22 01:36:37,529 INFO sqlalchemy.engine.Engine [cached since 1.05s ago] ('test_admin', '$2b$12$WghAKfo49zTCQCxuIc6ty.G8K4D1gr9x0fCUoR3fHhJFPy0DzA2R2', 'SUPERADMIN', 1, None)
2025-01-22 01:36:37,530 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:36:37,530 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:37,531 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
2025-01-22 01:36:37,531 INFO sqlalchemy.engine.Engine [cached since 1.047s ago] (1,)
测试管理员已创建: ID=1, 用户名=test_admin
------------------------------ Captured log setup ------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 DELETE FROM admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.064s ago] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.05s ago] ('test_admin', '$2b$12$WghAKfo49zTCQCxuIc6ty.G8K4D1gr9x0fCUoR3fHhJFPy0DzA2R2', 'SUPERADMIN', 1, None)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.047s ago] (1,)
----------------------------- Captured stdout call -----------------------------

=== 测试无效凭据登录 ===
发送无效凭据登录请求
2025-01-22 01:36:37,536 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:37,536 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:36:37,536 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,537 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:36:37,537 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,538 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:36:37,538 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,538 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:36:37,538 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,539 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:36:37,540 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:37,540 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.username = ?
2025-01-22 01:36:37,540 INFO sqlalchemy.engine.Engine [cached since 1.039s ago] ('test_admin',)
2025-01-22 01:36:37,805 INFO sqlalchemy.engine.Engine ROLLBACK
2025-01-22 01:36:37,806 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:37,806 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:36:37,806 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,806 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:36:37,807 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,807 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:36:37,807 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,808 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:36:37,808 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:37,809 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_logs
2025-01-22 01:36:37,809 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:37,809 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_users
2025-01-22 01:36:37,809 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:37,810 INFO sqlalchemy.engine.Engine 
DROP TABLE point_records
2025-01-22 01:36:37,810 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:36:37,810 INFO sqlalchemy.engine.Engine 
DROP TABLE users
2025-01-22 01:36:37,810 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:37,811 INFO sqlalchemy.engine.Engine COMMIT
登录响应状态码: 401
登录响应内容: {"detail":"用户名或密码错误"}
------------------------------ Captured log call -------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.username = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.039s ago] ('test_admin',)
INFO     sqlalchemy.engine.Engine:base.py:2702 ROLLBACK
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_logs
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE point_records
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
_____________________________ test_get_admin_info ______________________________

client = <httpx.AsyncClient object at 0x7ff5c50e6fc0>
test_db = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x7ff5c45e4f50>
test_admin = <app.models.admin.AdminUser object at 0x7ff5c45e51f0>

    @pytest.mark.asyncio
    async def test_get_admin_info(client, test_db, test_admin):
        """测试获取管理员信息"""
        print("\n=== 开始测试获取管理员信息 ===")
        print(f"测试管理员ID: {test_admin.id}")
        print(f"测试管理员用户名: {test_admin.username}")
    
        # 先登录获取token
        print("\n尝试登录...")
        login_response = await client.post(
            "/admin/login",
            headers={"Content-Type": "application/x-www-form-urlencoded"},
            data={
                "username": "test_admin",
                "password": "testpass123",
                "grant_type": "password"
            }
        )
        print(f"登录响应状态码: {login_response.status_code}")
        print(f"登录响应内容: {login_response.json()}")
    
        assert login_response.status_code == 200, "登录失败"
        token = login_response.json()["access_token"]
        print(f"获取到的令牌: {token[:20]}...")
    
        # 使用token获取管理员信息
        print("\n尝试获取管理员信息...")
        response = await client.get(
            "/admin/me",
            headers={"Authorization": f"Bearer {token}"}
        )
        print(f"获取信息响应状态码: {response.status_code}")
        if response.status_code != 200:
            print(f"错误响应: {response.json()}")
    
>       assert response.status_code == 200, "获取管理员信息失败"
E       AssertionError: 获取管理员信息失败
E       assert 401 == 200
E        +  where 401 = <Response [401 Unauthorized]>.status_code

tests/test_admin_auth.py:207: AssertionError
---------------------------- Captured stdout setup -----------------------------

=== 设置测试数据库 ===
2025-01-22 01:36:38,214 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:38,215 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:36:38,215 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,215 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:36:38,216 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,216 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:36:38,216 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,217 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:36:38,217 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,217 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:36:38,217 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,218 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:36:38,218 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,218 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:36:38,218 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,219 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:36:38,219 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,220 INFO sqlalchemy.engine.Engine 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


2025-01-22 01:36:38,220 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:38,220 INFO sqlalchemy.engine.Engine 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


2025-01-22 01:36:38,220 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:36:38,221 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


2025-01-22 01:36:38,221 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:36:38,222 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


2025-01-22 01:36:38,222 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:36:38,222 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:36:38,223 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:38,223 INFO sqlalchemy.engine.Engine DELETE FROM admin_users
2025-01-22 01:36:38,223 INFO sqlalchemy.engine.Engine [cached since 2.031s ago] ()
2025-01-22 01:36:38,224 INFO sqlalchemy.engine.Engine COMMIT

=== 创建测试管理员 ===
2025-01-22 01:36:38,475 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:38,475 INFO sqlalchemy.engine.Engine INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
2025-01-22 01:36:38,475 INFO sqlalchemy.engine.Engine [cached since 1.996s ago] ('test_admin', '$2b$12$kOtQ2OC2/1onjVN7yz0Cn.HTlQL9m42haXsSiLWLtH7BjYoq2C1py', 'SUPERADMIN', 1, None)
2025-01-22 01:36:38,476 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:36:38,476 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:38,477 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
2025-01-22 01:36:38,477 INFO sqlalchemy.engine.Engine [cached since 1.993s ago] (1,)
测试管理员已创建: ID=1, 用户名=test_admin
------------------------------ Captured log setup ------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 DELETE FROM admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 2.031s ago] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.996s ago] ('test_admin', '$2b$12$kOtQ2OC2/1onjVN7yz0Cn.HTlQL9m42haXsSiLWLtH7BjYoq2C1py', 'SUPERADMIN', 1, None)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.993s ago] (1,)
----------------------------- Captured stdout call -----------------------------

=== 开始测试获取管理员信息 ===
测试管理员ID: 1
测试管理员用户名: test_admin

尝试登录...
2025-01-22 01:36:38,481 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:38,482 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:36:38,482 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,482 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:36:38,482 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,483 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:36:38,483 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,483 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:36:38,483 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,484 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:36:38,484 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:38,485 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.username = ?
2025-01-22 01:36:38,485 INFO sqlalchemy.engine.Engine [cached since 1.984s ago] ('test_admin',)
2025-01-22 01:36:38,751 INFO sqlalchemy.engine.Engine UPDATE admin_users SET last_login=? WHERE admin_users.id = ?
2025-01-22 01:36:38,751 INFO sqlalchemy.engine.Engine [cached since 1.986s ago] ('2025-01-22 01:36:38.750790', 1)
2025-01-22 01:36:38,751 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:36:38,752 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:38,752 INFO sqlalchemy.engine.Engine INSERT INTO admin_logs (admin_id, action, target_type, target_id, details, ip_address) VALUES (?, ?, ?, ?, ?, ?) RETURNING id, created_at
2025-01-22 01:36:38,752 INFO sqlalchemy.engine.Engine [cached since 1.985s ago] (1, 'login', 'admin', '1', '管理员登录成功', None)
2025-01-22 01:36:38,753 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:36:38,753 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:38,754 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:36:38,754 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,754 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:36:38,754 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,755 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:36:38,755 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,756 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:36:38,756 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,756 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_logs
2025-01-22 01:36:38,756 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:38,757 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_users
2025-01-22 01:36:38,757 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:36:38,757 INFO sqlalchemy.engine.Engine 
DROP TABLE point_records
2025-01-22 01:36:38,757 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:38,758 INFO sqlalchemy.engine.Engine 
DROP TABLE users
2025-01-22 01:36:38,758 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:36:38,759 INFO sqlalchemy.engine.Engine COMMIT
登录响应状态码: 200
登录响应内容: {'access_token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwiZXhwIjoxNzM3NTExNTk4fQ.Y_wP5wjkdEJQVja1fv3xQzrpO4RUW_Z0uCtVRQ4Fbek', 'token_type': 'bearer'}
获取到的令牌: eyJhbGciOiJIUzI1NiIs...

尝试获取管理员信息...
2025-01-22 01:36:38,760 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:38,760 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:36:38,760 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,761 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:36:38,761 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,762 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:36:38,762 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,762 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:36:38,762 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,763 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:36:38,763 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,763 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:36:38,763 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,764 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:36:38,764 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,765 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:36:38,765 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,766 INFO sqlalchemy.engine.Engine 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


2025-01-22 01:36:38,766 INFO sqlalchemy.engine.Engine [no key 0.00009s] ()
2025-01-22 01:36:38,766 INFO sqlalchemy.engine.Engine 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


2025-01-22 01:36:38,766 INFO sqlalchemy.engine.Engine [no key 0.00011s] ()
2025-01-22 01:36:38,767 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


2025-01-22 01:36:38,767 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:38,768 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


2025-01-22 01:36:38,768 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:38,768 INFO sqlalchemy.engine.Engine COMMIT

=== 验证管理员令牌 ===
令牌: eyJhbGciOiJIUzI1NiIs...
开始验证令牌...
解析的管理员ID: 1
查询管理员信息...
2025-01-22 01:36:38,769 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:38,770 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
2025-01-22 01:36:38,770 INFO sqlalchemy.engine.Engine [generated in 0.00013s] (1,)
未找到管理员: ID=1
2025-01-22 01:36:38,771 INFO sqlalchemy.engine.Engine ROLLBACK
2025-01-22 01:36:38,771 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:36:38,771 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:36:38,771 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,772 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:36:38,772 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,773 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:36:38,773 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,773 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:36:38,773 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:36:38,774 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_logs
2025-01-22 01:36:38,774 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:38,774 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_users
2025-01-22 01:36:38,775 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:36:38,775 INFO sqlalchemy.engine.Engine 
DROP TABLE point_records
2025-01-22 01:36:38,775 INFO sqlalchemy.engine.Engine [no key 0.00017s] ()
2025-01-22 01:36:38,776 INFO sqlalchemy.engine.Engine 
DROP TABLE users
2025-01-22 01:36:38,776 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:36:38,776 INFO sqlalchemy.engine.Engine COMMIT
获取信息响应状态码: 401
错误响应: {'detail': '无效的认证凭据'}
------------------------------ Captured log call -------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.username = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.984s ago] ('test_admin',)
INFO     sqlalchemy.engine.Engine:base.py:1843 UPDATE admin_users SET last_login=? WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.986s ago] ('2025-01-22 01:36:38.750790', 1)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 INSERT INTO admin_logs (admin_id, action, target_type, target_id, details, ip_address) VALUES (?, ?, ?, ?, ?, ?) RETURNING id, created_at
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.985s ago] (1, 'login', 'admin', '1', '管理员登录成功', None)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_logs
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE point_records
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00009s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00011s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [generated in 0.00013s] (1,)
INFO     sqlalchemy.engine.Engine:base.py:2702 ROLLBACK
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_logs
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE point_records
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00017s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
________________________________ test_mute_user ________________________________

group_service = <app.services.group_management.GroupManagementService object at 0x7ff5c465e660>

    @pytest.mark.asyncio
    async def test_mute_user(group_service):
        """测试禁言用户"""
>       success = await group_service.mute_user(
            chat_id=123456,
            user_id=789012,
            duration=30,
            reason="测试禁言"
        )

tests/test_group_management.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <app.services.group_management.GroupManagementService object at 0x7ff5c465e660>
chat_id = 123456, user_id = 789012, duration = 30, reason = '测试禁言'

    async def mute_user(
        self,
        chat_id: int,
        user_id: int,
        duration: Optional[int] = None,
        reason: str = ""
    ) -> bool:
        """
        禁言用户
    
        参数:
            chat_id: 群组ID
            user_id: 用户ID
            duration: 禁言时长（分钟），None表示永久
            reason: 禁言原因
        """
        try:
            # 设置禁言权限
>           permissions = ChatPermissions(
                can_send_messages=False,
                can_send_media=False,
                can_send_polls=False,
                can_send_other=False,
                can_add_web_page_previews=False,
                can_invite_users=False
            )
E           TypeError: ChatPermissions.__init__() got an unexpected keyword argument 'can_send_media'

app/services/group_management.py:41: TypeError
_______________________________ test_unmute_user _______________________________

group_service = <app.services.group_management.GroupManagementService object at 0x7ff5c465dc10>

    @pytest.mark.asyncio
    async def test_unmute_user(group_service):
        """测试解除禁言"""
>       success = await group_service.unmute_user(
            chat_id=123456,
            user_id=789012,
            reason="测试解除禁言"
        )

tests/test_group_management.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <app.services.group_management.GroupManagementService object at 0x7ff5c465dc10>
chat_id = 123456, user_id = 789012, reason = '测试解除禁言'

    async def unmute_user(
        self,
        chat_id: int,
        user_id: int,
        reason: str = ""
    ) -> bool:
        """
        解除用户禁言
    
        参数:
            chat_id: 群组ID
            user_id: 用户ID
            reason: 解除原因
        """
        try:
            # 恢复默认权限
>           permissions = ChatPermissions(
                can_send_messages=True,
                can_send_media=True,
                can_send_polls=True,
                can_send_other=True,
                can_add_web_page_previews=True,
                can_invite_users=True
            )
E           TypeError: ChatPermissions.__init__() got an unexpected keyword argument 'can_send_media'

app/services/group_management.py:97: TypeError
=============================== warnings summary ===============================
venv/lib/python3.12/site-packages/passlib/utils/__init__.py:854
  /home/ubuntu/coser_bot/venv/lib/python3.12/site-packages/passlib/utils/__init__.py:854: DeprecationWarning: 'crypt' is deprecated and slated for removal in Python 3.13
    from crypt import crypt as _crypt

venv/lib/python3.12/site-packages/pydantic/_internal/_config.py:295
venv/lib/python3.12/site-packages/pydantic/_internal/_config.py:295
  /home/ubuntu/coser_bot/venv/lib/python3.12/site-packages/pydantic/_internal/_config.py:295: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

app/db/database.py:35
  /home/ubuntu/coser_bot/app/db/database.py:35: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

tests/test_admin_auth.py::test_login
tests/test_admin_auth.py::test_get_admin_info
tests/test_admin_auth.py::test_logout
  /home/ubuntu/coser_bot/app/core/auth.py:48: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    expire = datetime.utcnow() + expires_delta

tests/test_admin_auth.py::test_login
tests/test_admin_auth.py::test_get_admin_info
tests/test_admin_auth.py::test_logout
  /home/ubuntu/coser_bot/app/routers/admin.py:58: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    admin.last_login = datetime.utcnow()

tests/test_admin_auth.py::test_get_admin_info
tests/test_admin_auth.py::test_logout
  /home/ubuntu/coser_bot/venv/lib/python3.12/site-packages/jose/jwt.py:311: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    now = timegm(datetime.utcnow().utctimetuple())

tests/test_admin_auth.py::test_logout
  /home/ubuntu/coser_bot/app/core/auth.py:143: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    ttl = exp - datetime.utcnow().timestamp()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_admin_auth.py::test_login_invalid_credentials - AssertionError: 错误消息不符合预期
FAILED tests/test_admin_auth.py::test_get_admin_info - AssertionError: 获取管理员信息失败
FAILED tests/test_group_management.py::test_mute_user - TypeError: ChatPermissions.__init__() got an unexpected keyword argument 'c...
FAILED tests/test_group_management.py::test_unmute_user - TypeError: ChatPermissions.__init__() got an unexpected keyword argument 'c...
ERROR tests/test_admin_auth.py::test_login - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: ...
ERROR tests/test_admin_auth.py::test_login_invalid_credentials - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: ...
ERROR tests/test_admin_auth.py::test_get_admin_info - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: ...
ERROR tests/test_admin_auth.py::test_logout - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: ...
ERROR tests/test_admin_endpoints.py::test_ban_user - Failed: ScopeMismatch: You tried to access the function scoped fixture test...
ERROR tests/test_admin_endpoints.py::test_unban_user - Failed: ScopeMismatch: You tried to access the function scoped fixture test...
ERROR tests/test_admin_endpoints.py::test_adjust_points - Failed: ScopeMismatch: You tried to access the function scoped fixture test...
ERROR tests/test_admin_endpoints.py::test_get_user_stats - Failed: ScopeMismatch: You tried to access the function scoped fixture test...
============== 4 failed, 3 passed, 13 warnings, 8 errors in 5.22s ==============
