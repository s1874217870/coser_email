/home/ubuntu/coser_bot/venv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:207: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
============================= test session starts ==============================
platform linux -- Python 3.12.8, pytest-8.3.4, pluggy-1.5.0 -- /home/ubuntu/coser_bot/venv/bin/python
cachedir: .pytest_cache
rootdir: /home/ubuntu/coser_bot
configfile: pyproject.toml
plugins: anyio-4.8.0, asyncio-0.25.2
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None
collected 19 items                                                             

tests/test_admin.py::test_create_admin_user PASSED                       [  5%]
tests/test_admin.py::test_create_admin_log PASSED                        [ 10%]
tests/test_admin_auth.py::test_login PASSED                              [ 15%]
tests/test_admin_auth.py::test_login_invalid_credentials PASSED          [ 21%]
tests/test_admin_auth.py::test_get_admin_info FAILED                     [ 26%]
tests/test_admin_auth.py::test_logout PASSED                             [ 31%]
tests/test_auth.py::test_password_hashing PASSED                         [ 36%]
tests/test_auth.py::test_token_creation PASSED                           [ 42%]
tests/test_auth.py::test_token_blacklist PASSED                          [ 47%]
tests/test_group_management.py::test_mute_user FAILED                    [ 52%]
tests/test_group_management.py::test_mute_user ERROR                     [ 52%]
tests/test_group_management.py::test_unmute_user FAILED                  [ 57%]
tests/test_group_management.py::test_unmute_user ERROR                   [ 57%]
tests/test_group_management.py::test_get_chat_member FAILED              [ 63%]
tests/test_group_management.py::test_get_chat_member ERROR               [ 63%]
tests/test_points.py::test_daily_checkin PASSED                          [ 68%]
tests/test_points.py::test_activity_points PASSED                        [ 73%]
tests/test_points.py::test_content_points PASSED                         [ 78%]
tests/test_verification.py::test_email_format_validation PASSED          [ 84%]
tests/test_verification.py::test_verification_code PASSED                [ 89%]
tests/test_verification.py::test_rate_limit PASSED                       [ 94%]
tests/test_verification.py::test_email_sending PASSED                    [100%]

==================================== ERRORS ====================================
_____________________ ERROR at teardown of test_mute_user ______________________

self = Bot[token=7637865854:AAHokjIVng4IiLxb1Ltoztr4zEzri5QgzyU]
key = 'restrict_chat_member'
value = <bound method Bot.restrict_chat_member of Bot[token=7637865854:AAHokjIVng4IiLxb1Ltoztr4zEzri5QgzyU]>

    def __setattr__(self, key: str, value: object) -> None:
        """Overrides :meth:`object.__setattr__` to prevent the overriding of attributes.
    
        Raises:
            :exc:`AttributeError`
        """
        # protected attributes can always be set for convenient internal use
        if key[0] == "_" or not getattr(self, "_frozen", True):
            super().__setattr__(key, value)
            return
    
>       raise AttributeError(
            f"Attribute `{key}` of class `{self.__class__.__name__}` can't be set!"
        )
E       AttributeError: Attribute `restrict_chat_member` of class `Bot` can't be set!

venv/lib/python3.12/site-packages/telegram/_telegramobject.py:159: AttributeError
____________________ ERROR at teardown of test_unmute_user _____________________

self = Bot[token=7637865854:AAHokjIVng4IiLxb1Ltoztr4zEzri5QgzyU]
key = 'restrict_chat_member'
value = <bound method Bot.restrict_chat_member of Bot[token=7637865854:AAHokjIVng4IiLxb1Ltoztr4zEzri5QgzyU]>

    def __setattr__(self, key: str, value: object) -> None:
        """Overrides :meth:`object.__setattr__` to prevent the overriding of attributes.
    
        Raises:
            :exc:`AttributeError`
        """
        # protected attributes can always be set for convenient internal use
        if key[0] == "_" or not getattr(self, "_frozen", True):
            super().__setattr__(key, value)
            return
    
>       raise AttributeError(
            f"Attribute `{key}` of class `{self.__class__.__name__}` can't be set!"
        )
E       AttributeError: Attribute `restrict_chat_member` of class `Bot` can't be set!

venv/lib/python3.12/site-packages/telegram/_telegramobject.py:159: AttributeError
__________________ ERROR at teardown of test_get_chat_member ___________________

self = Bot[token=7637865854:AAHokjIVng4IiLxb1Ltoztr4zEzri5QgzyU]
key = 'get_chat_member'
value = <bound method Bot.get_chat_member of Bot[token=7637865854:AAHokjIVng4IiLxb1Ltoztr4zEzri5QgzyU]>

    def __setattr__(self, key: str, value: object) -> None:
        """Overrides :meth:`object.__setattr__` to prevent the overriding of attributes.
    
        Raises:
            :exc:`AttributeError`
        """
        # protected attributes can always be set for convenient internal use
        if key[0] == "_" or not getattr(self, "_frozen", True):
            super().__setattr__(key, value)
            return
    
>       raise AttributeError(
            f"Attribute `{key}` of class `{self.__class__.__name__}` can't be set!"
        )
E       AttributeError: Attribute `get_chat_member` of class `Bot` can't be set!

venv/lib/python3.12/site-packages/telegram/_telegramobject.py:159: AttributeError
=================================== FAILURES ===================================
_____________________________ test_get_admin_info ______________________________

client = <httpx.AsyncClient object at 0x7f2f51605d60>
test_db = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x7f2f517f07a0>
test_admin = <app.models.admin.AdminUser object at 0x7f2f5146f680>

    @pytest.mark.asyncio
    async def test_get_admin_info(client, test_db, test_admin):
        """测试获取管理员信息"""
        # 先登录获取token
        login_response = await client.post(
            "/admin/login",
            data={
                "username": "test_admin",
                "password": "testpass123",
                "grant_type": "password"  # OAuth2 要求
            }
        )
        token = login_response.json()["access_token"]
    
        # 使用token获取管理员信息
        response = await client.get(
            "/admin/me",
            headers={"Authorization": f"Bearer {token}"}
        )
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401 Unauthorized]>.status_code

tests/test_admin_auth.py:139: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-01-21 21:13:09,568 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-21 21:13:09,568 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-21 21:13:09,569 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:09,569 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-21 21:13:09,569 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:09,570 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-21 21:13:09,570 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:09,570 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-21 21:13:09,571 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:09,571 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-21 21:13:09,571 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:09,572 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-21 21:13:09,572 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:09,572 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-21 21:13:09,573 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:09,573 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-21 21:13:09,573 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:09,574 INFO sqlalchemy.engine.Engine 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


2025-01-21 21:13:09,574 INFO sqlalchemy.engine.Engine [no key 0.00009s] ()
2025-01-21 21:13:09,575 INFO sqlalchemy.engine.Engine 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


2025-01-21 21:13:09,575 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-21 21:13:09,575 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


2025-01-21 21:13:09,576 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-21 21:13:09,576 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


2025-01-21 21:13:09,576 INFO sqlalchemy.engine.Engine [no key 0.00012s] ()
2025-01-21 21:13:09,577 INFO sqlalchemy.engine.Engine COMMIT
2025-01-21 21:13:09,834 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-21 21:13:09,834 INFO sqlalchemy.engine.Engine INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
2025-01-21 21:13:09,834 INFO sqlalchemy.engine.Engine [cached since 1.119s ago] ('test_admin', '$2b$12$dBDD7fPIj6nKLu2aLEmuTO/1Uivt.dpsSZm.IMZN/vQW59z0QW2jq', 'SUPERADMIN', 1, None)
2025-01-21 21:13:09,836 INFO sqlalchemy.engine.Engine COMMIT
2025-01-21 21:13:09,836 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-21 21:13:09,837 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
2025-01-21 21:13:09,837 INFO sqlalchemy.engine.Engine [cached since 1.119s ago] (1,)
------------------------------ Captured log setup ------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00009s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00012s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.119s ago] ('test_admin', '$2b$12$dBDD7fPIj6nKLu2aLEmuTO/1Uivt.dpsSZm.IMZN/vQW59z0QW2jq', 'SUPERADMIN', 1, None)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.119s ago] (1,)
----------------------------- Captured stdout call -----------------------------
2025-01-21 21:13:09,841 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-21 21:13:09,842 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-21 21:13:09,842 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:09,842 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-21 21:13:09,842 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:09,843 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-21 21:13:09,843 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:09,844 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-21 21:13:09,844 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:09,844 INFO sqlalchemy.engine.Engine COMMIT
2025-01-21 21:13:09,845 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-21 21:13:09,845 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.username = ?
2025-01-21 21:13:09,845 INFO sqlalchemy.engine.Engine [cached since 1.109s ago] ('test_admin',)
2025-01-21 21:13:10,099 INFO sqlalchemy.engine.Engine UPDATE admin_users SET last_login=? WHERE admin_users.id = ?
2025-01-21 21:13:10,099 INFO sqlalchemy.engine.Engine [cached since 1.095s ago] ('2025-01-21 21:13:10.099428', 1)
2025-01-21 21:13:10,100 INFO sqlalchemy.engine.Engine COMMIT
2025-01-21 21:13:10,101 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-21 21:13:10,101 INFO sqlalchemy.engine.Engine INSERT INTO admin_logs (admin_id, action, target_type, target_id, details, ip_address) VALUES (?, ?, ?, ?, ?, ?) RETURNING id, created_at
2025-01-21 21:13:10,101 INFO sqlalchemy.engine.Engine [cached since 1.095s ago] (1, 'login', 'admin', '1', '管理员登录成功', None)
2025-01-21 21:13:10,102 INFO sqlalchemy.engine.Engine COMMIT
2025-01-21 21:13:10,102 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-21 21:13:10,102 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-21 21:13:10,102 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:10,103 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-21 21:13:10,103 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:10,104 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-21 21:13:10,104 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:10,104 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-21 21:13:10,104 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:10,105 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_logs
2025-01-21 21:13:10,105 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-21 21:13:10,106 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_users
2025-01-21 21:13:10,106 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-21 21:13:10,106 INFO sqlalchemy.engine.Engine 
DROP TABLE point_records
2025-01-21 21:13:10,106 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-21 21:13:10,107 INFO sqlalchemy.engine.Engine 
DROP TABLE users
2025-01-21 21:13:10,107 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-21 21:13:10,107 INFO sqlalchemy.engine.Engine COMMIT
2025-01-21 21:13:10,109 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-21 21:13:10,109 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-21 21:13:10,109 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:10,110 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-21 21:13:10,110 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:10,110 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-21 21:13:10,110 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:10,111 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-21 21:13:10,111 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:10,112 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-21 21:13:10,112 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:10,112 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-21 21:13:10,112 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:10,113 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-21 21:13:10,113 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:10,113 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-21 21:13:10,113 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:10,114 INFO sqlalchemy.engine.Engine 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


2025-01-21 21:13:10,114 INFO sqlalchemy.engine.Engine [no key 0.00009s] ()
2025-01-21 21:13:10,115 INFO sqlalchemy.engine.Engine 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


2025-01-21 21:13:10,115 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-21 21:13:10,116 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


2025-01-21 21:13:10,116 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-21 21:13:10,117 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


2025-01-21 21:13:10,117 INFO sqlalchemy.engine.Engine [no key 0.00009s] ()
2025-01-21 21:13:10,117 INFO sqlalchemy.engine.Engine COMMIT
2025-01-21 21:13:10,118 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-21 21:13:10,119 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
2025-01-21 21:13:10,119 INFO sqlalchemy.engine.Engine [generated in 0.00014s] ('1',)
2025-01-21 21:13:10,120 INFO sqlalchemy.engine.Engine ROLLBACK
2025-01-21 21:13:10,120 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-21 21:13:10,120 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-21 21:13:10,121 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:10,121 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-21 21:13:10,121 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:10,122 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-21 21:13:10,122 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:10,123 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-21 21:13:10,123 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:10,123 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_logs
2025-01-21 21:13:10,123 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-21 21:13:10,124 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_users
2025-01-21 21:13:10,124 INFO sqlalchemy.engine.Engine [no key 0.00011s] ()
2025-01-21 21:13:10,125 INFO sqlalchemy.engine.Engine 
DROP TABLE point_records
2025-01-21 21:13:10,125 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-21 21:13:10,125 INFO sqlalchemy.engine.Engine 
DROP TABLE users
2025-01-21 21:13:10,125 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-21 21:13:10,126 INFO sqlalchemy.engine.Engine COMMIT
------------------------------ Captured log call -------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.username = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.109s ago] ('test_admin',)
INFO     sqlalchemy.engine.Engine:base.py:1843 UPDATE admin_users SET last_login=? WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.095s ago] ('2025-01-21 21:13:10.099428', 1)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 INSERT INTO admin_logs (admin_id, action, target_type, target_id, details, ip_address) VALUES (?, ?, ?, ?, ?, ?) RETURNING id, created_at
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.095s ago] (1, 'login', 'admin', '1', '管理员登录成功', None)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_logs
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE point_records
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00009s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00009s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [generated in 0.00014s] ('1',)
INFO     sqlalchemy.engine.Engine:base.py:2702 ROLLBACK
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_logs
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00011s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE point_records
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
--------------------------- Captured stdout teardown ---------------------------
2025-01-21 21:13:10,182 INFO sqlalchemy.engine.Engine COMMIT
2025-01-21 21:13:10,182 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-21 21:13:10,182 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-21 21:13:10,183 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:10,183 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-21 21:13:10,183 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:10,184 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-21 21:13:10,184 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:10,185 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-21 21:13:10,185 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:10,185 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-21 21:13:10,185 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:10,186 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-21 21:13:10,186 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:10,186 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-21 21:13:10,187 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:10,187 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-21 21:13:10,187 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-21 21:13:10,188 INFO sqlalchemy.engine.Engine COMMIT
---------------------------- Captured log teardown -----------------------------
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
________________________________ test_mute_user ________________________________

group_service = <app.services.group_management.GroupManagementService object at 0x7f2f51492510>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f2f51533080>

    @pytest.mark.asyncio
    async def test_mute_user(group_service, monkeypatch):
        """测试禁言用户"""
        # 使用monkeypatch替代直接修改Bot实例
        async def mock_restrict_chat_member(*args, **kwargs):
            return True
    
        async def mock_send_message(*args, **kwargs):
            return True
    
        monkeypatch.setattr(group_service.bot, '_bot', None)  # 解除冻结
>       monkeypatch.setattr(group_service.bot, 'restrict_chat_member', mock_restrict_chat_member)

tests/test_group_management.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Bot[token=7637865854:AAHokjIVng4IiLxb1Ltoztr4zEzri5QgzyU]
key = 'restrict_chat_member'
value = <function test_mute_user.<locals>.mock_restrict_chat_member at 0x7f2f5035efc0>

    def __setattr__(self, key: str, value: object) -> None:
        """Overrides :meth:`object.__setattr__` to prevent the overriding of attributes.
    
        Raises:
            :exc:`AttributeError`
        """
        # protected attributes can always be set for convenient internal use
        if key[0] == "_" or not getattr(self, "_frozen", True):
            super().__setattr__(key, value)
            return
    
>       raise AttributeError(
            f"Attribute `{key}` of class `{self.__class__.__name__}` can't be set!"
        )
E       AttributeError: Attribute `restrict_chat_member` of class `Bot` can't be set!

venv/lib/python3.12/site-packages/telegram/_telegramobject.py:159: AttributeError
_______________________________ test_unmute_user _______________________________

group_service = <app.services.group_management.GroupManagementService object at 0x7f2f51530230>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f2f51531cd0>

    @pytest.mark.asyncio
    async def test_unmute_user(group_service, monkeypatch):
        """测试解除禁言"""
        # 使用monkeypatch替代直接修改Bot实例
        async def mock_restrict_chat_member(*args, **kwargs):
            return True
    
        async def mock_send_message(*args, **kwargs):
            return True
    
        monkeypatch.setattr(group_service.bot, '_bot', None)  # 解除冻结
>       monkeypatch.setattr(group_service.bot, 'restrict_chat_member', mock_restrict_chat_member)

tests/test_group_management.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Bot[token=7637865854:AAHokjIVng4IiLxb1Ltoztr4zEzri5QgzyU]
key = 'restrict_chat_member'
value = <function test_unmute_user.<locals>.mock_restrict_chat_member at 0x7f2f5035f920>

    def __setattr__(self, key: str, value: object) -> None:
        """Overrides :meth:`object.__setattr__` to prevent the overriding of attributes.
    
        Raises:
            :exc:`AttributeError`
        """
        # protected attributes can always be set for convenient internal use
        if key[0] == "_" or not getattr(self, "_frozen", True):
            super().__setattr__(key, value)
            return
    
>       raise AttributeError(
            f"Attribute `{key}` of class `{self.__class__.__name__}` can't be set!"
        )
E       AttributeError: Attribute `restrict_chat_member` of class `Bot` can't be set!

venv/lib/python3.12/site-packages/telegram/_telegramobject.py:159: AttributeError
_____________________________ test_get_chat_member _____________________________

group_service = <app.services.group_management.GroupManagementService object at 0x7f2f514910a0>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f2f51490a40>

    @pytest.mark.asyncio
    async def test_get_chat_member(group_service, monkeypatch):
        """测试获取群组成员信息"""
        # 使用monkeypatch替代直接修改Bot实例
        async def mock_get_chat_member(*args, **kwargs):
            return {"status": "member"}
    
        monkeypatch.setattr(group_service.bot, '_bot', None)  # 解除冻结
>       monkeypatch.setattr(group_service.bot, 'get_chat_member', mock_get_chat_member)

tests/test_group_management.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Bot[token=7637865854:AAHokjIVng4IiLxb1Ltoztr4zEzri5QgzyU]
key = 'get_chat_member'
value = <function test_get_chat_member.<locals>.mock_get_chat_member at 0x7f2f5035fd80>

    def __setattr__(self, key: str, value: object) -> None:
        """Overrides :meth:`object.__setattr__` to prevent the overriding of attributes.
    
        Raises:
            :exc:`AttributeError`
        """
        # protected attributes can always be set for convenient internal use
        if key[0] == "_" or not getattr(self, "_frozen", True):
            super().__setattr__(key, value)
            return
    
>       raise AttributeError(
            f"Attribute `{key}` of class `{self.__class__.__name__}` can't be set!"
        )
E       AttributeError: Attribute `get_chat_member` of class `Bot` can't be set!

venv/lib/python3.12/site-packages/telegram/_telegramobject.py:159: AttributeError
=============================== warnings summary ===============================
venv/lib/python3.12/site-packages/pydantic/_internal/_config.py:295
venv/lib/python3.12/site-packages/pydantic/_internal/_config.py:295
  /home/ubuntu/coser_bot/venv/lib/python3.12/site-packages/pydantic/_internal/_config.py:295: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

app/db/database.py:24
  /home/ubuntu/coser_bot/app/db/database.py:24: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

venv/lib/python3.12/site-packages/passlib/utils/__init__.py:854
  /home/ubuntu/coser_bot/venv/lib/python3.12/site-packages/passlib/utils/__init__.py:854: DeprecationWarning: 'crypt' is deprecated and slated for removal in Python 3.13
    from crypt import crypt as _crypt

tests/test_admin_auth.py::test_login
tests/test_admin_auth.py::test_get_admin_info
tests/test_admin_auth.py::test_logout
tests/test_auth.py::test_token_creation
  /home/ubuntu/coser_bot/app/core/auth.py:48: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    expire = datetime.utcnow() + expires_delta

tests/test_admin_auth.py::test_login
tests/test_admin_auth.py::test_get_admin_info
tests/test_admin_auth.py::test_logout
  /home/ubuntu/coser_bot/app/routers/admin.py:58: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    admin.last_login = datetime.utcnow()

tests/test_admin_auth.py::test_get_admin_info
tests/test_admin_auth.py::test_logout
tests/test_auth.py::test_token_blacklist
  /home/ubuntu/coser_bot/venv/lib/python3.12/site-packages/jose/jwt.py:311: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    now = timegm(datetime.utcnow().utctimetuple())

tests/test_admin_auth.py::test_logout
tests/test_auth.py::test_token_blacklist
  /home/ubuntu/coser_bot/app/core/auth.py:126: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    ttl = exp - datetime.utcnow().timestamp()

tests/test_auth.py::test_token_blacklist
  /home/ubuntu/coser_bot/app/core/auth.py:50: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    expire = datetime.utcnow() + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_admin_auth.py::test_get_admin_info - assert 401 == 200
FAILED tests/test_group_management.py::test_mute_user - AttributeError: Attribute `restrict_chat_member` of class `Bot` can't be set!
FAILED tests/test_group_management.py::test_unmute_user - AttributeError: Attribute `restrict_chat_member` of class `Bot` can't be set!
FAILED tests/test_group_management.py::test_get_chat_member - AttributeError: Attribute `get_chat_member` of class `Bot` can't be set!
ERROR tests/test_group_management.py::test_mute_user - AttributeError: Attribute `restrict_chat_member` of class `Bot` can't be set!
ERROR tests/test_group_management.py::test_unmute_user - AttributeError: Attribute `restrict_chat_member` of class `Bot` can't be set!
ERROR tests/test_group_management.py::test_get_chat_member - AttributeError: Attribute `get_chat_member` of class `Bot` can't be set!
============= 4 failed, 15 passed, 17 warnings, 3 errors in 7.82s ==============
