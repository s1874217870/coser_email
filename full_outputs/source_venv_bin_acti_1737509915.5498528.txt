/home/ubuntu/coser_bot/venv/lib/python3.12/site-packages/pytest_asyncio/plugin.py:207: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
============================= test session starts ==============================
platform linux -- Python 3.12.8, pytest-8.3.4, pluggy-1.5.0 -- /home/ubuntu/coser_bot/venv/bin/python
cachedir: .pytest_cache
rootdir: /home/ubuntu/coser_bot
configfile: pyproject.toml
plugins: anyio-4.8.0, asyncio-0.25.2
asyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=None
collected 11 items                                                             

tests/test_admin_auth.py::test_login PASSED                              [  9%]
tests/test_admin_auth.py::test_login ERROR                               [  9%]
tests/test_admin_auth.py::test_login_invalid_credentials FAILED          [ 18%]
tests/test_admin_auth.py::test_login_invalid_credentials ERROR           [ 18%]
tests/test_admin_auth.py::test_get_admin_info FAILED                     [ 27%]
tests/test_admin_auth.py::test_get_admin_info ERROR                      [ 27%]
tests/test_admin_auth.py::test_logout PASSED                             [ 36%]
tests/test_admin_auth.py::test_logout ERROR                              [ 36%]
tests/test_admin_endpoints.py::test_ban_user FAILED                      [ 45%]
tests/test_admin_endpoints.py::test_unban_user FAILED                    [ 54%]
tests/test_admin_endpoints.py::test_adjust_points FAILED                 [ 63%]
tests/test_admin_endpoints.py::test_get_user_stats FAILED                [ 72%]
tests/test_group_management.py::test_mute_user FAILED                    [ 81%]
tests/test_group_management.py::test_unmute_user FAILED                  [ 90%]
tests/test_group_management.py::test_get_chat_member PASSED              [100%]

==================================== ERRORS ====================================
_______________________ ERROR at teardown of test_login ________________________

self = <sqlalchemy.engine.base.Connection object at 0x7f0fb44ec110>
dialect = <sqlalchemy.dialects.sqlite.aiosqlite.SQLiteDialect_aiosqlite object at 0x7f0fb4702c60>
context = <sqlalchemy.dialects.sqlite.aiosqlite.SQLiteExecutionContext_aiosqlite object at 0x7f0fb44ef740>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f0fb44ef770>
parameters = [(1,)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:942: in do_execute
    cursor.execute(statement, parameters)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:150: in execute
    self._adapt_connection._handle_exception(error)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:301: in _handle_exception
    raise error
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:132: in execute
    self.await_(_cursor.execute(operation, parameters))
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:132: in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:196: in greenlet_spawn
    value = await result
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:48: in execute
    await self._execute(self._cursor.execute, sql, parameters)
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:40: in _execute
    return await self._conn._execute(fn, *args, **kwargs)
venv/lib/python3.12/site-packages/aiosqlite/core.py:132: in _execute
    return await future
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Connection(Thread-1, started daemon 139705425434176)>

    def run(self) -> None:
        """
        Execute function calls on a separate thread.
    
        :meta private:
        """
        while True:
            # Continues running until all queue items are processed,
            # even after connection is closed (so we can finalize all
            # futures)
    
            tx_item = self._tx.get()
            if tx_item is _STOP_RUNNING_SENTINEL:
                break
    
            future, function = tx_item
    
            try:
                LOG.debug("executing %s", function)
>               result = function()
E               sqlite3.OperationalError: no such table: admin_users

venv/lib/python3.12/site-packages/aiosqlite/core.py:115: OperationalError

The above exception was the direct cause of the following exception:

test_db = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x7f0fb447ba70>

    @pytest_asyncio.fixture
    async def test_admin(test_db):
        """创建测试管理员"""
        print("\n=== 创建测试管理员 ===")
    
        # 创建新管理员
        admin = AdminUser(
            username="test_admin",
            password_hash=Auth.get_password_hash("testpass123"),
            role=AdminRole.SUPERADMIN,
            is_active=True
        )
        test_db.add(admin)
        await test_db.commit()
        await test_db.refresh(admin)
        print(f"测试管理员已创建: ID={admin.id}, 用户名={admin.username}")
    
        yield admin
    
        # 清理测试数据
        await test_db.delete(admin)
>       await test_db.commit()

tests/test_admin_auth.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/ext/asyncio/session.py:1011: in commit
    await greenlet_spawn(self.sync_session.commit)
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
<string>:2: in commit
    ???
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
<string>:2: in _prepare_impl
    ???
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4353: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4488: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4449: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:679: in execute
    util.preloaded.orm_persistence.delete_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:193: in delete_obj
    _emit_delete_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1465: in _emit_delete_statements
    c = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context
    self.dialect.do_execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:942: in do_execute
    cursor.execute(statement, parameters)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:150: in execute
    self._adapt_connection._handle_exception(error)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:301: in _handle_exception
    raise error
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:132: in execute
    self.await_(_cursor.execute(operation, parameters))
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:132: in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:196: in greenlet_spawn
    value = await result
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:48: in execute
    await self._execute(self._cursor.execute, sql, parameters)
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:40: in _execute
    return await self._conn._execute(fn, *args, **kwargs)
venv/lib/python3.12/site-packages/aiosqlite/core.py:132: in _execute
    return await future
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Connection(Thread-1, started daemon 139705425434176)>

    def run(self) -> None:
        """
        Execute function calls on a separate thread.
    
        :meta private:
        """
        while True:
            # Continues running until all queue items are processed,
            # even after connection is closed (so we can finalize all
            # futures)
    
            tx_item = self._tx.get()
            if tx_item is _STOP_RUNNING_SENTINEL:
                break
    
            future, function = tx_item
    
            try:
                LOG.debug("executing %s", function)
>               result = function()
E               sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: admin_users
E               [SQL: DELETE FROM admin_users WHERE admin_users.id = ?]
E               [parameters: (1,)]
E               (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/aiosqlite/core.py:115: OperationalError
---------------------------- Captured stdout setup -----------------------------

=== 设置测试数据库 ===
2025-01-22 01:38:26,713 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:26,714 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:26,714 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:26,715 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:38:26,715 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:26,715 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:26,715 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:26,716 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:38:26,716 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:26,717 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:26,717 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:26,717 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:38:26,717 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:26,718 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:26,718 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:26,719 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:38:26,719 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:26,720 INFO sqlalchemy.engine.Engine 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


2025-01-22 01:38:26,720 INFO sqlalchemy.engine.Engine [no key 0.00010s] ()
2025-01-22 01:38:26,721 INFO sqlalchemy.engine.Engine 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


2025-01-22 01:38:26,721 INFO sqlalchemy.engine.Engine [no key 0.00013s] ()
2025-01-22 01:38:26,722 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


2025-01-22 01:38:26,722 INFO sqlalchemy.engine.Engine [no key 0.00012s] ()
2025-01-22 01:38:26,723 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


2025-01-22 01:38:26,723 INFO sqlalchemy.engine.Engine [no key 0.00013s] ()
2025-01-22 01:38:26,724 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:26,725 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:26,726 INFO sqlalchemy.engine.Engine DELETE FROM admin_users
2025-01-22 01:38:26,726 INFO sqlalchemy.engine.Engine [generated in 0.00013s] ()
2025-01-22 01:38:26,726 INFO sqlalchemy.engine.Engine COMMIT

=== 创建测试管理员 ===
2025-01-22 01:38:27,017 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:27,018 INFO sqlalchemy.engine.Engine INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
2025-01-22 01:38:27,018 INFO sqlalchemy.engine.Engine [generated in 0.00018s] ('test_admin', '$2b$12$ri8eOJ4GmAOXqs0v24hgL.Dd0Sw8b9mO7wS0ngImXEMyPAqjup4sK', 'SUPERADMIN', 1, None)
2025-01-22 01:38:27,020 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:27,021 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:27,022 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
2025-01-22 01:38:27,023 INFO sqlalchemy.engine.Engine [generated in 0.00013s] (1,)
测试管理员已创建: ID=1, 用户名=test_admin
------------------------------ Captured log setup ------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00010s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00013s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00012s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00013s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 DELETE FROM admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [generated in 0.00013s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
WARNING  passlib.handlers.bcrypt:bcrypt.py:622 (trapped) error reading bcrypt version
Traceback (most recent call last):
  File "/home/ubuntu/coser_bot/venv/lib/python3.12/site-packages/passlib/handlers/bcrypt.py", line 620, in _load_backend_mixin
    version = _bcrypt.__about__.__version__
              ^^^^^^^^^^^^^^^^^
AttributeError: module 'bcrypt' has no attribute '__about__'
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
INFO     sqlalchemy.engine.Engine:base.py:1843 [generated in 0.00018s] ('test_admin', '$2b$12$ri8eOJ4GmAOXqs0v24hgL.Dd0Sw8b9mO7wS0ngImXEMyPAqjup4sK', 'SUPERADMIN', 1, None)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [generated in 0.00013s] (1,)
----------------------------- Captured stdout call -----------------------------

=== 测试管理员登录 ===
发送登录请求: {'username': 'test_admin', 'password': 'testpass123', 'grant_type': 'password'}
2025-01-22 01:38:27,037 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:27,037 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:27,037 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,038 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:27,038 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,038 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:27,038 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,039 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:27,039 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,040 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:27,040 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:27,041 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.username = ?
2025-01-22 01:38:27,041 INFO sqlalchemy.engine.Engine [generated in 0.00016s] ('test_admin',)
2025-01-22 01:38:27,303 INFO sqlalchemy.engine.Engine UPDATE admin_users SET last_login=? WHERE admin_users.id = ?
2025-01-22 01:38:27,303 INFO sqlalchemy.engine.Engine [generated in 0.00019s] ('2025-01-22 01:38:27.302598', 1)
2025-01-22 01:38:27,304 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:27,305 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:27,306 INFO sqlalchemy.engine.Engine INSERT INTO admin_logs (admin_id, action, target_type, target_id, details, ip_address) VALUES (?, ?, ?, ?, ?, ?) RETURNING id, created_at
2025-01-22 01:38:27,306 INFO sqlalchemy.engine.Engine [generated in 0.00016s] (1, 'login', 'admin', '1', '管理员登录成功', None)
2025-01-22 01:38:27,307 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:27,308 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:27,308 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:27,308 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,309 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:27,309 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,309 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:27,309 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,310 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:27,310 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,311 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_logs
2025-01-22 01:38:27,311 INFO sqlalchemy.engine.Engine [no key 0.00009s] ()
2025-01-22 01:38:27,312 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_users
2025-01-22 01:38:27,312 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:27,312 INFO sqlalchemy.engine.Engine 
DROP TABLE point_records
2025-01-22 01:38:27,312 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:27,313 INFO sqlalchemy.engine.Engine 
DROP TABLE users
2025-01-22 01:38:27,313 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:27,314 INFO sqlalchemy.engine.Engine COMMIT
登录响应状态码: 200
登录响应内容: {"access_token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwiZXhwIjoxNzM3NTExNzA3fQ.Vuf1gO_d1JZA-Z9lBKFwK8hJKjpndaOJSdy9U_40JPQ","token_type":"bearer"}
------------------------------ Captured log call -------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.username = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [generated in 0.00016s] ('test_admin',)
INFO     sqlalchemy.engine.Engine:base.py:1843 UPDATE admin_users SET last_login=? WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [generated in 0.00019s] ('2025-01-22 01:38:27.302598', 1)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 INSERT INTO admin_logs (admin_id, action, target_type, target_id, details, ip_address) VALUES (?, ?, ?, ?, ?, ?) RETURNING id, created_at
INFO     sqlalchemy.engine.Engine:base.py:1843 [generated in 0.00016s] (1, 'login', 'admin', '1', '管理员登录成功', None)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_logs
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00009s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE point_records
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
--------------------------- Captured stdout teardown ---------------------------
2025-01-22 01:38:27,316 INFO sqlalchemy.engine.Engine DELETE FROM admin_users WHERE admin_users.id = ?
2025-01-22 01:38:27,316 INFO sqlalchemy.engine.Engine [generated in 0.00014s] (1,)
2025-01-22 01:38:27,317 INFO sqlalchemy.engine.Engine ROLLBACK

=== 清理测试数据库 ===
2025-01-22 01:38:27,319 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:27,319 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:27,319 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,320 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:38:27,320 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,321 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:27,321 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,321 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:38:27,321 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,322 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:27,322 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,323 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:38:27,323 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,323 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:27,323 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,324 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:38:27,324 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,325 INFO sqlalchemy.engine.Engine COMMIT
---------------------------- Captured log teardown -----------------------------
INFO     sqlalchemy.engine.Engine:base.py:1843 DELETE FROM admin_users WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [generated in 0.00014s] (1,)
INFO     sqlalchemy.engine.Engine:base.py:2702 ROLLBACK
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
_____________ ERROR at teardown of test_login_invalid_credentials ______________

self = <sqlalchemy.engine.base.Connection object at 0x7f0fb30e0230>
dialect = <sqlalchemy.dialects.sqlite.aiosqlite.SQLiteDialect_aiosqlite object at 0x7f0fb4702c60>
context = <sqlalchemy.dialects.sqlite.aiosqlite.SQLiteExecutionContext_aiosqlite object at 0x7f0fb30e2c30>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f0fb44ef770>
parameters = [(1,)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:942: in do_execute
    cursor.execute(statement, parameters)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:150: in execute
    self._adapt_connection._handle_exception(error)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:301: in _handle_exception
    raise error
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:132: in execute
    self.await_(_cursor.execute(operation, parameters))
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:132: in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:196: in greenlet_spawn
    value = await result
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:48: in execute
    await self._execute(self._cursor.execute, sql, parameters)
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:40: in _execute
    return await self._conn._execute(fn, *args, **kwargs)
venv/lib/python3.12/site-packages/aiosqlite/core.py:132: in _execute
    return await future
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Connection(Thread-1, started daemon 139705425434176)>

    def run(self) -> None:
        """
        Execute function calls on a separate thread.
    
        :meta private:
        """
        while True:
            # Continues running until all queue items are processed,
            # even after connection is closed (so we can finalize all
            # futures)
    
            tx_item = self._tx.get()
            if tx_item is _STOP_RUNNING_SENTINEL:
                break
    
            future, function = tx_item
    
            try:
                LOG.debug("executing %s", function)
>               result = function()
E               sqlite3.OperationalError: no such table: admin_users

venv/lib/python3.12/site-packages/aiosqlite/core.py:115: OperationalError

The above exception was the direct cause of the following exception:

test_db = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x7f0fb30e25d0>

    @pytest_asyncio.fixture
    async def test_admin(test_db):
        """创建测试管理员"""
        print("\n=== 创建测试管理员 ===")
    
        # 创建新管理员
        admin = AdminUser(
            username="test_admin",
            password_hash=Auth.get_password_hash("testpass123"),
            role=AdminRole.SUPERADMIN,
            is_active=True
        )
        test_db.add(admin)
        await test_db.commit()
        await test_db.refresh(admin)
        print(f"测试管理员已创建: ID={admin.id}, 用户名={admin.username}")
    
        yield admin
    
        # 清理测试数据
        await test_db.delete(admin)
>       await test_db.commit()

tests/test_admin_auth.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/ext/asyncio/session.py:1011: in commit
    await greenlet_spawn(self.sync_session.commit)
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
<string>:2: in commit
    ???
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
<string>:2: in _prepare_impl
    ???
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4353: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4488: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4449: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:679: in execute
    util.preloaded.orm_persistence.delete_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:193: in delete_obj
    _emit_delete_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1465: in _emit_delete_statements
    c = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context
    self.dialect.do_execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:942: in do_execute
    cursor.execute(statement, parameters)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:150: in execute
    self._adapt_connection._handle_exception(error)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:301: in _handle_exception
    raise error
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:132: in execute
    self.await_(_cursor.execute(operation, parameters))
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:132: in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:196: in greenlet_spawn
    value = await result
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:48: in execute
    await self._execute(self._cursor.execute, sql, parameters)
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:40: in _execute
    return await self._conn._execute(fn, *args, **kwargs)
venv/lib/python3.12/site-packages/aiosqlite/core.py:132: in _execute
    return await future
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Connection(Thread-1, started daemon 139705425434176)>

    def run(self) -> None:
        """
        Execute function calls on a separate thread.
    
        :meta private:
        """
        while True:
            # Continues running until all queue items are processed,
            # even after connection is closed (so we can finalize all
            # futures)
    
            tx_item = self._tx.get()
            if tx_item is _STOP_RUNNING_SENTINEL:
                break
    
            future, function = tx_item
    
            try:
                LOG.debug("executing %s", function)
>               result = function()
E               sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: admin_users
E               [SQL: DELETE FROM admin_users WHERE admin_users.id = ?]
E               [parameters: (1,)]
E               (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/aiosqlite/core.py:115: OperationalError
---------------------------- Captured stdout setup -----------------------------

=== 设置测试数据库 ===
2025-01-22 01:38:27,792 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:27,792 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:27,792 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,793 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:38:27,793 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,793 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:27,793 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,794 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:38:27,794 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,795 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:27,795 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,795 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:38:27,795 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,796 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:27,796 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,796 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:38:27,796 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,797 INFO sqlalchemy.engine.Engine 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


2025-01-22 01:38:27,797 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:27,798 INFO sqlalchemy.engine.Engine 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


2025-01-22 01:38:27,798 INFO sqlalchemy.engine.Engine [no key 0.00009s] ()
2025-01-22 01:38:27,799 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


2025-01-22 01:38:27,799 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:27,800 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


2025-01-22 01:38:27,800 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:27,800 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:27,801 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:27,802 INFO sqlalchemy.engine.Engine DELETE FROM admin_users
2025-01-22 01:38:27,802 INFO sqlalchemy.engine.Engine [cached since 1.076s ago] ()
2025-01-22 01:38:27,802 INFO sqlalchemy.engine.Engine COMMIT

=== 创建测试管理员 ===
2025-01-22 01:38:28,063 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:28,063 INFO sqlalchemy.engine.Engine INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
2025-01-22 01:38:28,063 INFO sqlalchemy.engine.Engine [cached since 1.045s ago] ('test_admin', '$2b$12$.HICYarEq5yYS6FirdglQOUrkxTmPUT1R8PpRoFSKVT1z/RhVtGcK', 'SUPERADMIN', 1, None)
2025-01-22 01:38:28,065 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:28,066 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:28,066 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
2025-01-22 01:38:28,066 INFO sqlalchemy.engine.Engine [cached since 1.044s ago] (1,)
测试管理员已创建: ID=1, 用户名=test_admin
------------------------------ Captured log setup ------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00009s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 DELETE FROM admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.076s ago] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.045s ago] ('test_admin', '$2b$12$.HICYarEq5yYS6FirdglQOUrkxTmPUT1R8PpRoFSKVT1z/RhVtGcK', 'SUPERADMIN', 1, None)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.044s ago] (1,)
----------------------------- Captured stdout call -----------------------------

=== 测试无效凭据登录 ===
发送无效凭据登录请求
2025-01-22 01:38:28,072 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:28,072 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:28,072 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,073 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:28,073 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,073 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:28,073 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,074 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:28,074 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,075 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:28,075 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:28,076 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.username = ?
2025-01-22 01:38:28,076 INFO sqlalchemy.engine.Engine [cached since 1.035s ago] ('test_admin',)
2025-01-22 01:38:28,336 INFO sqlalchemy.engine.Engine ROLLBACK
2025-01-22 01:38:28,337 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:28,337 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:28,337 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,338 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:28,338 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,339 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:28,339 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,340 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:28,340 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,340 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_logs
2025-01-22 01:38:28,341 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:28,341 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_users
2025-01-22 01:38:28,341 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:28,342 INFO sqlalchemy.engine.Engine 
DROP TABLE point_records
2025-01-22 01:38:28,342 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:28,342 INFO sqlalchemy.engine.Engine 
DROP TABLE users
2025-01-22 01:38:28,342 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:28,343 INFO sqlalchemy.engine.Engine COMMIT
登录响应状态码: 401
登录响应内容: {"detail":"用户名或密码错误"}
------------------------------ Captured log call -------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.username = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.035s ago] ('test_admin',)
INFO     sqlalchemy.engine.Engine:base.py:2702 ROLLBACK
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_logs
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE point_records
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
--------------------------- Captured stdout teardown ---------------------------
2025-01-22 01:38:28,350 INFO sqlalchemy.engine.Engine DELETE FROM admin_users WHERE admin_users.id = ?
2025-01-22 01:38:28,350 INFO sqlalchemy.engine.Engine [cached since 1.034s ago] (1,)
2025-01-22 01:38:28,350 INFO sqlalchemy.engine.Engine ROLLBACK

=== 清理测试数据库 ===
2025-01-22 01:38:28,352 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:28,352 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:28,352 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,353 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:38:28,353 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,353 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:28,353 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,354 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:38:28,354 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,355 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:28,355 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,355 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:38:28,355 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,356 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:28,356 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,357 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:38:28,357 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,357 INFO sqlalchemy.engine.Engine COMMIT
---------------------------- Captured log teardown -----------------------------
INFO     sqlalchemy.engine.Engine:base.py:1843 DELETE FROM admin_users WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.034s ago] (1,)
INFO     sqlalchemy.engine.Engine:base.py:2702 ROLLBACK
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
___________________ ERROR at teardown of test_get_admin_info ___________________

self = <sqlalchemy.engine.base.Connection object at 0x7f0fb3bfcb30>
dialect = <sqlalchemy.dialects.sqlite.aiosqlite.SQLiteDialect_aiosqlite object at 0x7f0fb4702c60>
context = <sqlalchemy.dialects.sqlite.aiosqlite.SQLiteExecutionContext_aiosqlite object at 0x7f0fb3bffe60>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f0fb44ef770>
parameters = [(1,)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:942: in do_execute
    cursor.execute(statement, parameters)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:150: in execute
    self._adapt_connection._handle_exception(error)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:301: in _handle_exception
    raise error
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:132: in execute
    self.await_(_cursor.execute(operation, parameters))
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:132: in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:196: in greenlet_spawn
    value = await result
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:48: in execute
    await self._execute(self._cursor.execute, sql, parameters)
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:40: in _execute
    return await self._conn._execute(fn, *args, **kwargs)
venv/lib/python3.12/site-packages/aiosqlite/core.py:132: in _execute
    return await future
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Connection(Thread-1, started daemon 139705425434176)>

    def run(self) -> None:
        """
        Execute function calls on a separate thread.
    
        :meta private:
        """
        while True:
            # Continues running until all queue items are processed,
            # even after connection is closed (so we can finalize all
            # futures)
    
            tx_item = self._tx.get()
            if tx_item is _STOP_RUNNING_SENTINEL:
                break
    
            future, function = tx_item
    
            try:
                LOG.debug("executing %s", function)
>               result = function()
E               sqlite3.OperationalError: no such table: admin_users

venv/lib/python3.12/site-packages/aiosqlite/core.py:115: OperationalError

The above exception was the direct cause of the following exception:

test_db = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x7f0fb3bfee40>

    @pytest_asyncio.fixture
    async def test_admin(test_db):
        """创建测试管理员"""
        print("\n=== 创建测试管理员 ===")
    
        # 创建新管理员
        admin = AdminUser(
            username="test_admin",
            password_hash=Auth.get_password_hash("testpass123"),
            role=AdminRole.SUPERADMIN,
            is_active=True
        )
        test_db.add(admin)
        await test_db.commit()
        await test_db.refresh(admin)
        print(f"测试管理员已创建: ID={admin.id}, 用户名={admin.username}")
    
        yield admin
    
        # 清理测试数据
        await test_db.delete(admin)
>       await test_db.commit()

tests/test_admin_auth.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/ext/asyncio/session.py:1011: in commit
    await greenlet_spawn(self.sync_session.commit)
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
<string>:2: in commit
    ???
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
<string>:2: in _prepare_impl
    ???
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4353: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4488: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4449: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:679: in execute
    util.preloaded.orm_persistence.delete_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:193: in delete_obj
    _emit_delete_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1465: in _emit_delete_statements
    c = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context
    self.dialect.do_execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:942: in do_execute
    cursor.execute(statement, parameters)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:150: in execute
    self._adapt_connection._handle_exception(error)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:301: in _handle_exception
    raise error
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:132: in execute
    self.await_(_cursor.execute(operation, parameters))
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:132: in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:196: in greenlet_spawn
    value = await result
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:48: in execute
    await self._execute(self._cursor.execute, sql, parameters)
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:40: in _execute
    return await self._conn._execute(fn, *args, **kwargs)
venv/lib/python3.12/site-packages/aiosqlite/core.py:132: in _execute
    return await future
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Connection(Thread-1, started daemon 139705425434176)>

    def run(self) -> None:
        """
        Execute function calls on a separate thread.
    
        :meta private:
        """
        while True:
            # Continues running until all queue items are processed,
            # even after connection is closed (so we can finalize all
            # futures)
    
            tx_item = self._tx.get()
            if tx_item is _STOP_RUNNING_SENTINEL:
                break
    
            future, function = tx_item
    
            try:
                LOG.debug("executing %s", function)
>               result = function()
E               sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: admin_users
E               [SQL: DELETE FROM admin_users WHERE admin_users.id = ?]
E               [parameters: (1,)]
E               (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/aiosqlite/core.py:115: OperationalError
---------------------------- Captured stdout setup -----------------------------

=== 设置测试数据库 ===
2025-01-22 01:38:28,740 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:28,740 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:28,740 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,741 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:38:28,741 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,741 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:28,741 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,742 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:38:28,742 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,743 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:28,743 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,743 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:38:28,744 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,744 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:28,744 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,745 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:38:28,745 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,746 INFO sqlalchemy.engine.Engine 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


2025-01-22 01:38:28,746 INFO sqlalchemy.engine.Engine [no key 0.00009s] ()
2025-01-22 01:38:28,747 INFO sqlalchemy.engine.Engine 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


2025-01-22 01:38:28,747 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:28,747 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


2025-01-22 01:38:28,748 INFO sqlalchemy.engine.Engine [no key 0.00009s] ()
2025-01-22 01:38:28,748 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


2025-01-22 01:38:28,748 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:28,749 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:28,750 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:28,750 INFO sqlalchemy.engine.Engine DELETE FROM admin_users
2025-01-22 01:38:28,750 INFO sqlalchemy.engine.Engine [cached since 2.024s ago] ()
2025-01-22 01:38:28,751 INFO sqlalchemy.engine.Engine COMMIT

=== 创建测试管理员 ===
2025-01-22 01:38:29,010 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:29,011 INFO sqlalchemy.engine.Engine INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
2025-01-22 01:38:29,011 INFO sqlalchemy.engine.Engine [cached since 1.992s ago] ('test_admin', '$2b$12$qUKIhX2bET1sjZUNPpH2C.R.ADd2NpqB.ABfl7K1V33R8/KVqS3f6', 'SUPERADMIN', 1, None)
2025-01-22 01:38:29,012 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:29,012 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:29,012 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
2025-01-22 01:38:29,013 INFO sqlalchemy.engine.Engine [cached since 1.99s ago] (1,)
测试管理员已创建: ID=1, 用户名=test_admin
------------------------------ Captured log setup ------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00009s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00009s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 DELETE FROM admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 2.024s ago] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.992s ago] ('test_admin', '$2b$12$qUKIhX2bET1sjZUNPpH2C.R.ADd2NpqB.ABfl7K1V33R8/KVqS3f6', 'SUPERADMIN', 1, None)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.99s ago] (1,)
----------------------------- Captured stdout call -----------------------------

=== 开始测试获取管理员信息 ===
测试管理员ID: 1
测试管理员用户名: test_admin

尝试登录...
2025-01-22 01:38:29,017 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:29,018 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:29,018 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,018 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:29,019 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,019 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:29,019 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,020 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:29,020 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,020 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:29,021 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:29,021 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.username = ?
2025-01-22 01:38:29,021 INFO sqlalchemy.engine.Engine [cached since 1.98s ago] ('test_admin',)
2025-01-22 01:38:29,277 INFO sqlalchemy.engine.Engine UPDATE admin_users SET last_login=? WHERE admin_users.id = ?
2025-01-22 01:38:29,277 INFO sqlalchemy.engine.Engine [cached since 1.974s ago] ('2025-01-22 01:38:29.277313', 1)
2025-01-22 01:38:29,278 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:29,279 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:29,279 INFO sqlalchemy.engine.Engine INSERT INTO admin_logs (admin_id, action, target_type, target_id, details, ip_address) VALUES (?, ?, ?, ?, ?, ?) RETURNING id, created_at
2025-01-22 01:38:29,279 INFO sqlalchemy.engine.Engine [cached since 1.973s ago] (1, 'login', 'admin', '1', '管理员登录成功', None)
2025-01-22 01:38:29,280 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:29,280 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:29,281 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:29,281 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,281 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:29,281 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,282 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:29,282 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,283 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:29,283 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,284 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_logs
2025-01-22 01:38:29,284 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:29,284 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_users
2025-01-22 01:38:29,285 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:29,285 INFO sqlalchemy.engine.Engine 
DROP TABLE point_records
2025-01-22 01:38:29,285 INFO sqlalchemy.engine.Engine [no key 0.00011s] ()
2025-01-22 01:38:29,286 INFO sqlalchemy.engine.Engine 
DROP TABLE users
2025-01-22 01:38:29,286 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:29,286 INFO sqlalchemy.engine.Engine COMMIT
登录响应状态码: 200
登录响应内容: {'access_token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwiZXhwIjoxNzM3NTExNzA5fQ.LKVd5v37aZLlqIUmYnjkpxSPMdY-KkLGIRQgZitSv4Q', 'token_type': 'bearer'}
获取到的令牌: eyJhbGciOiJIUzI1NiIs...

尝试获取管理员信息...
2025-01-22 01:38:29,288 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:29,288 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:29,288 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,289 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:38:29,289 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,289 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:29,289 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,290 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:38:29,290 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,291 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:29,291 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,291 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:38:29,292 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,292 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:29,292 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,293 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:38:29,293 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,294 INFO sqlalchemy.engine.Engine 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


2025-01-22 01:38:29,294 INFO sqlalchemy.engine.Engine [no key 0.00009s] ()
2025-01-22 01:38:29,295 INFO sqlalchemy.engine.Engine 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


2025-01-22 01:38:29,295 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:29,295 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


2025-01-22 01:38:29,296 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:29,296 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


2025-01-22 01:38:29,296 INFO sqlalchemy.engine.Engine [no key 0.00009s] ()
2025-01-22 01:38:29,297 INFO sqlalchemy.engine.Engine COMMIT

=== 验证管理员令牌 ===
令???: eyJhbGciOiJIUzI1NiIs...
开始验证令牌...
解析的管理员ID: 1
查询管理员信息...
2025-01-22 01:38:29,298 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:29,299 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
2025-01-22 01:38:29,299 INFO sqlalchemy.engine.Engine [generated in 0.00015s] (1,)
未找到管理员: ID=1
2025-01-22 01:38:29,300 INFO sqlalchemy.engine.Engine ROLLBACK
2025-01-22 01:38:29,300 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:29,301 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:29,301 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,301 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:29,301 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,302 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:29,302 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,302 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:29,302 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,303 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_logs
2025-01-22 01:38:29,303 INFO sqlalchemy.engine.Engine [no key 0.00013s] ()
2025-01-22 01:38:29,304 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_users
2025-01-22 01:38:29,304 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:29,304 INFO sqlalchemy.engine.Engine 
DROP TABLE point_records
2025-01-22 01:38:29,304 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:29,305 INFO sqlalchemy.engine.Engine 
DROP TABLE users
2025-01-22 01:38:29,305 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:29,305 INFO sqlalchemy.engine.Engine COMMIT
获取信息响应状态码: 401
错误响应: {'detail': '无效的认证凭据'}
------------------------------ Captured log call -------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.username = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.98s ago] ('test_admin',)
INFO     sqlalchemy.engine.Engine:base.py:1843 UPDATE admin_users SET last_login=? WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.974s ago] ('2025-01-22 01:38:29.277313', 1)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 INSERT INTO admin_logs (admin_id, action, target_type, target_id, details, ip_address) VALUES (?, ?, ?, ?, ?, ?) RETURNING id, created_at
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.973s ago] (1, 'login', 'admin', '1', '管理员登录成功', None)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_logs
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE point_records
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00011s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00009s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00009s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [generated in 0.00015s] (1,)
INFO     sqlalchemy.engine.Engine:base.py:2702 ROLLBACK
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_logs
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00013s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE point_records
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
--------------------------- Captured stdout teardown ---------------------------
2025-01-22 01:38:29,312 INFO sqlalchemy.engine.Engine DELETE FROM admin_users WHERE admin_users.id = ?
2025-01-22 01:38:29,312 INFO sqlalchemy.engine.Engine [cached since 1.996s ago] (1,)
2025-01-22 01:38:29,312 INFO sqlalchemy.engine.Engine ROLLBACK

=== 清理测试数据库 ===
2025-01-22 01:38:29,313 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:29,313 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:29,313 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,314 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:38:29,314 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,315 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:29,315 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,315 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:38:29,315 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,316 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:29,316 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,316 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:38:29,316 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,317 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:29,317 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,317 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:38:29,317 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,318 INFO sqlalchemy.engine.Engine COMMIT
---------------------------- Captured log teardown -----------------------------
INFO     sqlalchemy.engine.Engine:base.py:1843 DELETE FROM admin_users WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.996s ago] (1,)
INFO     sqlalchemy.engine.Engine:base.py:2702 ROLLBACK
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
_______________________ ERROR at teardown of test_logout _______________________

self = <sqlalchemy.engine.base.Connection object at 0x7f0fb3bf5fa0>
dialect = <sqlalchemy.dialects.sqlite.aiosqlite.SQLiteDialect_aiosqlite object at 0x7f0fb4702c60>
context = <sqlalchemy.dialects.sqlite.aiosqlite.SQLiteExecutionContext_aiosqlite object at 0x7f0fb31180e0>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f0fb44ef770>
parameters = [(1,)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:942: in do_execute
    cursor.execute(statement, parameters)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:150: in execute
    self._adapt_connection._handle_exception(error)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:301: in _handle_exception
    raise error
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:132: in execute
    self.await_(_cursor.execute(operation, parameters))
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:132: in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:196: in greenlet_spawn
    value = await result
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:48: in execute
    await self._execute(self._cursor.execute, sql, parameters)
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:40: in _execute
    return await self._conn._execute(fn, *args, **kwargs)
venv/lib/python3.12/site-packages/aiosqlite/core.py:132: in _execute
    return await future
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Connection(Thread-1, started daemon 139705425434176)>

    def run(self) -> None:
        """
        Execute function calls on a separate thread.
    
        :meta private:
        """
        while True:
            # Continues running until all queue items are processed,
            # even after connection is closed (so we can finalize all
            # futures)
    
            tx_item = self._tx.get()
            if tx_item is _STOP_RUNNING_SENTINEL:
                break
    
            future, function = tx_item
    
            try:
                LOG.debug("executing %s", function)
>               result = function()
E               sqlite3.OperationalError: no such table: admin_users

venv/lib/python3.12/site-packages/aiosqlite/core.py:115: OperationalError

The above exception was the direct cause of the following exception:

test_db = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x7f0fb3bf4e00>

    @pytest_asyncio.fixture
    async def test_admin(test_db):
        """创建测试管理员"""
        print("\n=== 创建测试管理员 ===")
    
        # 创建新管理员
        admin = AdminUser(
            username="test_admin",
            password_hash=Auth.get_password_hash("testpass123"),
            role=AdminRole.SUPERADMIN,
            is_active=True
        )
        test_db.add(admin)
        await test_db.commit()
        await test_db.refresh(admin)
        print(f"测试管理员已创建: ID={admin.id}, 用户名={admin.username}")
    
        yield admin
    
        # 清理测试数据
        await test_db.delete(admin)
>       await test_db.commit()

tests/test_admin_auth.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/ext/asyncio/session.py:1011: in commit
    await greenlet_spawn(self.sync_session.commit)
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:203: in greenlet_spawn
    result = context.switch(value)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
<string>:2: in commit
    ???
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
<string>:2: in _prepare_impl
    ???
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4353: in flush
    self._flush(objects)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4488: in _flush
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4449: in _flush
    flush_context.execute()
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:679: in execute
    util.preloaded.orm_persistence.delete_obj(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:193: in delete_obj
    _emit_delete_statements(
venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1465: in _emit_delete_statements
    c = connection.execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context
    return self._exec_single_context(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context
    self.dialect.do_execute(
venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:942: in do_execute
    cursor.execute(statement, parameters)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:150: in execute
    self._adapt_connection._handle_exception(error)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:301: in _handle_exception
    raise error
venv/lib/python3.12/site-packages/sqlalchemy/dialects/sqlite/aiosqlite.py:132: in execute
    self.await_(_cursor.execute(operation, parameters))
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:132: in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:196: in greenlet_spawn
    value = await result
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:48: in execute
    await self._execute(self._cursor.execute, sql, parameters)
venv/lib/python3.12/site-packages/aiosqlite/cursor.py:40: in _execute
    return await self._conn._execute(fn, *args, **kwargs)
venv/lib/python3.12/site-packages/aiosqlite/core.py:132: in _execute
    return await future
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Connection(Thread-1, started daemon 139705425434176)>

    def run(self) -> None:
        """
        Execute function calls on a separate thread.
    
        :meta private:
        """
        while True:
            # Continues running until all queue items are processed,
            # even after connection is closed (so we can finalize all
            # futures)
    
            tx_item = self._tx.get()
            if tx_item is _STOP_RUNNING_SENTINEL:
                break
    
            future, function = tx_item
    
            try:
                LOG.debug("executing %s", function)
>               result = function()
E               sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: admin_users
E               [SQL: DELETE FROM admin_users WHERE admin_users.id = ?]
E               [parameters: (1,)]
E               (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/aiosqlite/core.py:115: OperationalError
---------------------------- Captured stdout setup -----------------------------

=== 设置测试数据库 ===
2025-01-22 01:38:29,713 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:29,713 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:29,713 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,714 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:38:29,714 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,715 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:29,715 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,715 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:38:29,715 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,716 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:29,716 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,716 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:38:29,716 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,717 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:29,717 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,717 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:38:29,718 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,718 INFO sqlalchemy.engine.Engine 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


2025-01-22 01:38:29,718 INFO sqlalchemy.engine.Engine [no key 0.00009s] ()
2025-01-22 01:38:29,719 INFO sqlalchemy.engine.Engine 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


2025-01-22 01:38:29,719 INFO sqlalchemy.engine.Engine [no key 0.00013s] ()
2025-01-22 01:38:29,720 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


2025-01-22 01:38:29,720 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:29,720 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


2025-01-22 01:38:29,721 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:29,721 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:29,722 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:29,722 INFO sqlalchemy.engine.Engine DELETE FROM admin_users
2025-01-22 01:38:29,722 INFO sqlalchemy.engine.Engine [cached since 2.997s ago] ()
2025-01-22 01:38:29,723 INFO sqlalchemy.engine.Engine COMMIT

=== 创建测试管理员 ===
2025-01-22 01:38:29,980 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:29,980 INFO sqlalchemy.engine.Engine INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
2025-01-22 01:38:29,980 INFO sqlalchemy.engine.Engine [cached since 2.962s ago] ('test_admin', '$2b$12$ltjEfSxpRwWSVoZ4Np7d9e5po/nZBxQDAK/msXD3e2y0PHDmDnI7C', 'SUPERADMIN', 1, None)
2025-01-22 01:38:29,981 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:29,982 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:29,982 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
2025-01-22 01:38:29,982 INFO sqlalchemy.engine.Engine [cached since 2.96s ago] (1,)
测试管理员已创建: ID=1, 用户名=test_admin
------------------------------ Captured log setup ------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00009s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00013s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 DELETE FROM admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 2.997s ago] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 2.962s ago] ('test_admin', '$2b$12$ltjEfSxpRwWSVoZ4Np7d9e5po/nZBxQDAK/msXD3e2y0PHDmDnI7C', 'SUPERADMIN', 1, None)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 2.96s ago] (1,)
----------------------------- Captured stdout call -----------------------------
2025-01-22 01:38:29,987 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:29,987 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:29,987 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,988 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:29,988 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,988 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:29,989 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,989 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:29,989 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,990 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:29,990 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:29,991 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.username = ?
2025-01-22 01:38:29,991 INFO sqlalchemy.engine.Engine [cached since 2.949s ago] ('test_admin',)
2025-01-22 01:38:30,242 INFO sqlalchemy.engine.Engine UPDATE admin_users SET last_login=? WHERE admin_users.id = ?
2025-01-22 01:38:30,242 INFO sqlalchemy.engine.Engine [cached since 2.939s ago] ('2025-01-22 01:38:30.242095', 1)
2025-01-22 01:38:30,243 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:30,243 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:30,243 INFO sqlalchemy.engine.Engine INSERT INTO admin_logs (admin_id, action, target_type, target_id, details, ip_address) VALUES (?, ?, ?, ?, ?, ?) RETURNING id, created_at
2025-01-22 01:38:30,244 INFO sqlalchemy.engine.Engine [cached since 2.938s ago] (1, 'login', 'admin', '1', '管理员登录成功', None)
2025-01-22 01:38:30,244 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:30,245 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:30,245 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:30,245 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,245 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:30,246 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,246 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:30,246 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,247 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:30,247 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,247 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_logs
2025-01-22 01:38:30,248 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:30,248 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_users
2025-01-22 01:38:30,248 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:30,249 INFO sqlalchemy.engine.Engine 
DROP TABLE point_records
2025-01-22 01:38:30,249 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:30,249 INFO sqlalchemy.engine.Engine 
DROP TABLE users
2025-01-22 01:38:30,249 INFO sqlalchemy.engine.Engine [no key 0.00010s] ()
2025-01-22 01:38:30,250 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:30,252 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:30,252 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:30,252 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,253 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:38:30,253 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,253 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:30,253 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,254 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:38:30,254 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,254 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:30,254 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,255 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:38:30,255 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,256 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:30,256 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,256 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:38:30,256 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,257 INFO sqlalchemy.engine.Engine 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


2025-01-22 01:38:30,257 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:30,258 INFO sqlalchemy.engine.Engine 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


2025-01-22 01:38:30,258 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:30,258 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


2025-01-22 01:38:30,258 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:30,259 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


2025-01-22 01:38:30,259 INFO sqlalchemy.engine.Engine [no key 0.00009s] ()
2025-01-22 01:38:30,260 INFO sqlalchemy.engine.Engine COMMIT

=== 验证管理员令牌 ===
令牌: eyJhbGciOiJIUzI1NiIs...
令牌在黑名单中
2025-01-22 01:38:30,261 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:30,261 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:30,261 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,261 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:30,261 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,262 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:30,262 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,263 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:30,263 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,263 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_logs
2025-01-22 01:38:30,263 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:30,264 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_users
2025-01-22 01:38:30,264 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:30,264 INFO sqlalchemy.engine.Engine 
DROP TABLE point_records
2025-01-22 01:38:30,264 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:30,265 INFO sqlalchemy.engine.Engine 
DROP TABLE users
2025-01-22 01:38:30,265 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:30,265 INFO sqlalchemy.engine.Engine COMMIT
------------------------------ Captured log call -------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.username = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 2.949s ago] ('test_admin',)
INFO     sqlalchemy.engine.Engine:base.py:1843 UPDATE admin_users SET last_login=? WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 2.939s ago] ('2025-01-22 01:38:30.242095', 1)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 INSERT INTO admin_logs (admin_id, action, target_type, target_id, details, ip_address) VALUES (?, ?, ?, ?, ?, ?) RETURNING id, created_at
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 2.938s ago] (1, 'login', 'admin', '1', '管理员登录成功', None)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_logs
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE point_records
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00010s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00009s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_logs
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE point_records
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
--------------------------- Captured stdout teardown ---------------------------
2025-01-22 01:38:30,267 INFO sqlalchemy.engine.Engine DELETE FROM admin_users WHERE admin_users.id = ?
2025-01-22 01:38:30,267 INFO sqlalchemy.engine.Engine [cached since 2.95s ago] (1,)
2025-01-22 01:38:30,267 INFO sqlalchemy.engine.Engine ROLLBACK

=== 清理测试数据库 ===
2025-01-22 01:38:30,268 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:30,268 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:30,268 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,269 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:38:30,269 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,269 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:30,269 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,270 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:38:30,270 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,270 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:30,271 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,271 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:38:30,271 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,272 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:30,272 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,272 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:38:30,272 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,273 INFO sqlalchemy.engine.Engine COMMIT
---------------------------- Captured log teardown -----------------------------
INFO     sqlalchemy.engine.Engine:base.py:1843 DELETE FROM admin_users WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 2.95s ago] (1,)
INFO     sqlalchemy.engine.Engine:base.py:2702 ROLLBACK
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
=================================== FAILURES ===================================
________________________ test_login_invalid_credentials ________________________

client = <httpx.AsyncClient object at 0x7f0fb3ba7a10>
test_db = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x7f0fb30e25d0>
test_admin = <app.models.admin.AdminUser object at 0x7f0fb30e0200>

    @pytest.mark.asyncio
    async def test_login_invalid_credentials(client, test_db, test_admin):
        """测试无效凭据登录"""
        print("\n=== 测试无效凭据登录 ===")
    
        headers = {
            "Content-Type": "application/x-www-form-urlencoded"
        }
    
        form_data = {
            "username": "test_admin",
            "password": "wrongpass",
            "grant_type": "password"
        }
    
        print(f"发送无效凭据登录请求")
        response = await client.post(
            "/admin/login",
            headers=headers,
            data=form_data
        )
    
        print(f"登录响应状态码: {response.status_code}")
        print(f"登录响应内容: {response.text}")
    
        assert response.status_code == 401, "预期应该返回401未授权错误"
>       assert "无效的认证凭据" in response.text, "错误消息不符合预期"
E       AssertionError: 错误消息不符合预期
E       assert '无效的认证凭据' in '{"detail":"用户名或密码错误"}'
E        +  where '{"detail":"用户名或密码错误"}' = <Response [401 Unauthorized]>.text

tests/test_admin_auth.py:170: AssertionError
---------------------------- Captured stdout setup -----------------------------

=== 设置测试数据库 ===
2025-01-22 01:38:27,792 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:27,792 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:27,792 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,793 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:38:27,793 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,793 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:27,793 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,794 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:38:27,794 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,795 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:27,795 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,795 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:38:27,795 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,796 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:27,796 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,796 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:38:27,796 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:27,797 INFO sqlalchemy.engine.Engine 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


2025-01-22 01:38:27,797 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:27,798 INFO sqlalchemy.engine.Engine 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


2025-01-22 01:38:27,798 INFO sqlalchemy.engine.Engine [no key 0.00009s] ()
2025-01-22 01:38:27,799 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


2025-01-22 01:38:27,799 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:27,800 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


2025-01-22 01:38:27,800 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:27,800 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:27,801 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:27,802 INFO sqlalchemy.engine.Engine DELETE FROM admin_users
2025-01-22 01:38:27,802 INFO sqlalchemy.engine.Engine [cached since 1.076s ago] ()
2025-01-22 01:38:27,802 INFO sqlalchemy.engine.Engine COMMIT

=== 创建测试管理员 ===
2025-01-22 01:38:28,063 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:28,063 INFO sqlalchemy.engine.Engine INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
2025-01-22 01:38:28,063 INFO sqlalchemy.engine.Engine [cached since 1.045s ago] ('test_admin', '$2b$12$.HICYarEq5yYS6FirdglQOUrkxTmPUT1R8PpRoFSKVT1z/RhVtGcK', 'SUPERADMIN', 1, None)
2025-01-22 01:38:28,065 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:28,066 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:28,066 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
2025-01-22 01:38:28,066 INFO sqlalchemy.engine.Engine [cached since 1.044s ago] (1,)
测试管理员已创建: ID=1, 用户名=test_admin
------------------------------ Captured log setup ------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00009s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 DELETE FROM admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.076s ago] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.045s ago] ('test_admin', '$2b$12$.HICYarEq5yYS6FirdglQOUrkxTmPUT1R8PpRoFSKVT1z/RhVtGcK', 'SUPERADMIN', 1, None)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.044s ago] (1,)
----------------------------- Captured stdout call -----------------------------

=== 测试无效凭据登录 ===
发送无效凭据登录请求
2025-01-22 01:38:28,072 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:28,072 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:28,072 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,073 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:28,073 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,073 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:28,073 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,074 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:28,074 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,075 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:28,075 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:28,076 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.username = ?
2025-01-22 01:38:28,076 INFO sqlalchemy.engine.Engine [cached since 1.035s ago] ('test_admin',)
2025-01-22 01:38:28,336 INFO sqlalchemy.engine.Engine ROLLBACK
2025-01-22 01:38:28,337 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:28,337 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:28,337 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,338 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:28,338 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,339 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:28,339 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,340 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:28,340 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,340 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_logs
2025-01-22 01:38:28,341 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:28,341 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_users
2025-01-22 01:38:28,341 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:28,342 INFO sqlalchemy.engine.Engine 
DROP TABLE point_records
2025-01-22 01:38:28,342 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:28,342 INFO sqlalchemy.engine.Engine 
DROP TABLE users
2025-01-22 01:38:28,342 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:28,343 INFO sqlalchemy.engine.Engine COMMIT
登录响应状态码: 401
登录响应内容: {"detail":"用户名或密码错误"}
------------------------------ Captured log call -------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.username = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.035s ago] ('test_admin',)
INFO     sqlalchemy.engine.Engine:base.py:2702 ROLLBACK
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_logs
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE point_records
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
_____________________________ test_get_admin_info ______________________________

client = <httpx.AsyncClient object at 0x7f0fb30e2a50>
test_db = <sqlalchemy.ext.asyncio.session.AsyncSession object at 0x7f0fb3bfee40>
test_admin = <app.models.admin.AdminUser object at 0x7f0fb3bfc230>

    @pytest.mark.asyncio
    async def test_get_admin_info(client, test_db, test_admin):
        """测试获取管理员信息"""
        print("\n=== 开始测试获取管理员信息 ===")
        print(f"测试管理员ID: {test_admin.id}")
        print(f"测试管理员用户名: {test_admin.username}")
    
        # 先登录获取token
        print("\n尝试登录...")
        login_response = await client.post(
            "/admin/login",
            headers={"Content-Type": "application/x-www-form-urlencoded"},
            data={
                "username": "test_admin",
                "password": "testpass123",
                "grant_type": "password"
            }
        )
        print(f"登录响应状态码: {login_response.status_code}")
        print(f"登录响应内容: {login_response.json()}")
    
        assert login_response.status_code == 200, "登录失败"
        token = login_response.json()["access_token"]
        print(f"获取到的令牌: {token[:20]}...")
    
        # 使用token获取管理员信息
        print("\n尝试获取管理员信息...")
        response = await client.get(
            "/admin/me",
            headers={"Authorization": f"Bearer {token}"}
        )
        print(f"获取信息响应状态码: {response.status_code}")
        if response.status_code != 200:
            print(f"错误响应: {response.json()}")
    
>       assert response.status_code == 200, "获取管理员信息失败"
E       AssertionError: 获取管理员信息失败
E       assert 401 == 200
E        +  where 401 = <Response [401 Unauthorized]>.status_code

tests/test_admin_auth.py:207: AssertionError
---------------------------- Captured stdout setup -----------------------------

=== 设置测试数据库 ===
2025-01-22 01:38:28,740 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:28,740 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:28,740 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,741 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:38:28,741 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,741 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:28,741 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,742 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:38:28,742 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,743 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:28,743 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,743 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:38:28,744 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,744 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:28,744 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,745 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:38:28,745 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:28,746 INFO sqlalchemy.engine.Engine 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


2025-01-22 01:38:28,746 INFO sqlalchemy.engine.Engine [no key 0.00009s] ()
2025-01-22 01:38:28,747 INFO sqlalchemy.engine.Engine 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


2025-01-22 01:38:28,747 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:28,747 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


2025-01-22 01:38:28,748 INFO sqlalchemy.engine.Engine [no key 0.00009s] ()
2025-01-22 01:38:28,748 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


2025-01-22 01:38:28,748 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:28,749 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:28,750 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:28,750 INFO sqlalchemy.engine.Engine DELETE FROM admin_users
2025-01-22 01:38:28,750 INFO sqlalchemy.engine.Engine [cached since 2.024s ago] ()
2025-01-22 01:38:28,751 INFO sqlalchemy.engine.Engine COMMIT

=== 创建测试管理员 ===
2025-01-22 01:38:29,010 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:29,011 INFO sqlalchemy.engine.Engine INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
2025-01-22 01:38:29,011 INFO sqlalchemy.engine.Engine [cached since 1.992s ago] ('test_admin', '$2b$12$qUKIhX2bET1sjZUNPpH2C.R.ADd2NpqB.ABfl7K1V33R8/KVqS3f6', 'SUPERADMIN', 1, None)
2025-01-22 01:38:29,012 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:29,012 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:29,012 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
2025-01-22 01:38:29,013 INFO sqlalchemy.engine.Engine [cached since 1.99s ago] (1,)
测试管理员已创建: ID=1, 用户名=test_admin
------------------------------ Captured log setup ------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00009s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00009s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 DELETE FROM admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 2.024s ago] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.992s ago] ('test_admin', '$2b$12$qUKIhX2bET1sjZUNPpH2C.R.ADd2NpqB.ABfl7K1V33R8/KVqS3f6', 'SUPERADMIN', 1, None)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.99s ago] (1,)
----------------------------- Captured stdout call -----------------------------

=== 开始测试获取管理员信息 ===
测试管理员ID: 1
测试管理员用户名: test_admin

尝试登录...
2025-01-22 01:38:29,017 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:29,018 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:29,018 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,018 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:29,019 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,019 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:29,019 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,020 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:29,020 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,020 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:29,021 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:29,021 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.username = ?
2025-01-22 01:38:29,021 INFO sqlalchemy.engine.Engine [cached since 1.98s ago] ('test_admin',)
2025-01-22 01:38:29,277 INFO sqlalchemy.engine.Engine UPDATE admin_users SET last_login=? WHERE admin_users.id = ?
2025-01-22 01:38:29,277 INFO sqlalchemy.engine.Engine [cached since 1.974s ago] ('2025-01-22 01:38:29.277313', 1)
2025-01-22 01:38:29,278 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:29,279 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:29,279 INFO sqlalchemy.engine.Engine INSERT INTO admin_logs (admin_id, action, target_type, target_id, details, ip_address) VALUES (?, ?, ?, ?, ?, ?) RETURNING id, created_at
2025-01-22 01:38:29,279 INFO sqlalchemy.engine.Engine [cached since 1.973s ago] (1, 'login', 'admin', '1', '管理员登录成功', None)
2025-01-22 01:38:29,280 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:29,280 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:29,281 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:29,281 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,281 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:29,281 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,282 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:29,282 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,283 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:29,283 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,284 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_logs
2025-01-22 01:38:29,284 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:29,284 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_users
2025-01-22 01:38:29,285 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:29,285 INFO sqlalchemy.engine.Engine 
DROP TABLE point_records
2025-01-22 01:38:29,285 INFO sqlalchemy.engine.Engine [no key 0.00011s] ()
2025-01-22 01:38:29,286 INFO sqlalchemy.engine.Engine 
DROP TABLE users
2025-01-22 01:38:29,286 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:29,286 INFO sqlalchemy.engine.Engine COMMIT
登录响应状态码: 200
登录响应内容: {'access_token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwiZXhwIjoxNzM3NTExNzA5fQ.LKVd5v37aZLlqIUmYnjkpxSPMdY-KkLGIRQgZitSv4Q', 'token_type': 'bearer'}
获取到的令牌: eyJhbGciOiJIUzI1NiIs...

尝试获取管理员信息...
2025-01-22 01:38:29,288 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:29,288 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:29,288 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,289 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:38:29,289 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,289 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:29,289 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,290 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:38:29,290 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,291 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:29,291 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,291 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:38:29,292 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,292 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:29,292 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,293 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:38:29,293 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,294 INFO sqlalchemy.engine.Engine 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


2025-01-22 01:38:29,294 INFO sqlalchemy.engine.Engine [no key 0.00009s] ()
2025-01-22 01:38:29,295 INFO sqlalchemy.engine.Engine 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


2025-01-22 01:38:29,295 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:29,295 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


2025-01-22 01:38:29,296 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:29,296 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


2025-01-22 01:38:29,296 INFO sqlalchemy.engine.Engine [no key 0.00009s] ()
2025-01-22 01:38:29,297 INFO sqlalchemy.engine.Engine COMMIT

=== 验证管理员令牌 ===
令牌: eyJhbGciOiJIUzI1NiIs...
开始验证令牌...
解析的管理员ID: 1
查询管理员信息...
2025-01-22 01:38:29,298 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:29,299 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
2025-01-22 01:38:29,299 INFO sqlalchemy.engine.Engine [generated in 0.00015s] (1,)
未找到管理员: ID=1
2025-01-22 01:38:29,300 INFO sqlalchemy.engine.Engine ROLLBACK
2025-01-22 01:38:29,300 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:29,301 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:29,301 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,301 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:29,301 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,302 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:29,302 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,302 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:29,302 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:29,303 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_logs
2025-01-22 01:38:29,303 INFO sqlalchemy.engine.Engine [no key 0.00013s] ()
2025-01-22 01:38:29,304 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_users
2025-01-22 01:38:29,304 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:29,304 INFO sqlalchemy.engine.Engine 
DROP TABLE point_records
2025-01-22 01:38:29,304 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:29,305 INFO sqlalchemy.engine.Engine 
DROP TABLE users
2025-01-22 01:38:29,305 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:29,305 INFO sqlalchemy.engine.Engine COMMIT
获取信息响应状态码: 401
错误响应: {'detail': '无效的认证凭据'}
------------------------------ Captured log call -------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.username = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.98s ago] ('test_admin',)
INFO     sqlalchemy.engine.Engine:base.py:1843 UPDATE admin_users SET last_login=? WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.974s ago] ('2025-01-22 01:38:29.277313', 1)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 INSERT INTO admin_logs (admin_id, action, target_type, target_id, details, ip_address) VALUES (?, ?, ?, ?, ?, ?) RETURNING id, created_at
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.973s ago] (1, 'login', 'admin', '1', '管理员登录成功', None)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_logs
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE point_records
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00011s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00009s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00009s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [generated in 0.00015s] (1,)
INFO     sqlalchemy.engine.Engine:base.py:2702 ROLLBACK
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_logs
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00013s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE point_records
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
________________________________ test_ban_user _________________________________

client = <httpx.AsyncClient object at 0x7f0fb3144050>
admin_token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwiZXhwIjoxNzM3NTExNzEwfQ.tq5xhdGxhlGtC3pUn0uYDDv1B2_2ZIu0Mo834WTdRFk'

    @pytest.mark.asyncio
    async def test_ban_user(client, admin_token):
        """测试封禁用户"""
        print("\n=== 测试封禁用户 ===")
    
>       response = await client.put(
            "/admin/users/123456/ban",
            headers={"Authorization": f"Bearer {admin_token}"}
        )

tests/test_admin_endpoints.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/httpx/_client.py:1896: in put
    return await self.request(
venv/lib/python3.12/site-packages/httpx/_client.py:1540: in request
    return await self.send(request, auth=auth, follow_redirects=follow_redirects)
venv/lib/python3.12/site-packages/httpx/_client.py:1629: in send
    response = await self._send_handling_auth(
venv/lib/python3.12/site-packages/httpx/_client.py:1657: in _send_handling_auth
    response = await self._send_handling_redirects(
venv/lib/python3.12/site-packages/httpx/_client.py:1694: in _send_handling_redirects
    response = await self._send_single_request(request)
venv/lib/python3.12/site-packages/httpx/_client.py:1730: in _send_single_request
    response = await transport.handle_async_request(request)
venv/lib/python3.12/site-packages/httpx/_transports/asgi.py:170: in handle_async_request
    await self.app(scope, receive, send)
venv/lib/python3.12/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
venv/lib/python3.12/site-packages/starlette/applications.py:113: in __call__
    await self.middleware_stack(scope, receive, send)
venv/lib/python3.12/site-packages/starlette/middleware/errors.py:187: in __call__
    raise exc
venv/lib/python3.12/site-packages/starlette/middleware/errors.py:165: in __call__
    await self.app(scope, receive, _send)
venv/lib/python3.12/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    raise exc
venv/lib/python3.12/site-packages/starlette/_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
venv/lib/python3.12/site-packages/starlette/routing.py:715: in __call__
    await self.middleware_stack(scope, receive, send)
venv/lib/python3.12/site-packages/starlette/routing.py:735: in app
    await route.handle(scope, receive, send)
venv/lib/python3.12/site-packages/starlette/routing.py:288: in handle
    await self.app(scope, receive, send)
venv/lib/python3.12/site-packages/starlette/routing.py:76: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    raise exc
venv/lib/python3.12/site-packages/starlette/_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
venv/lib/python3.12/site-packages/starlette/routing.py:73: in app
    response = await f(request)
venv/lib/python3.12/site-packages/fastapi/routing.py:291: in app
    solved_result = await solve_dependencies(
venv/lib/python3.12/site-packages/fastapi/dependencies/utils.py:638: in solve_dependencies
    solved = await call(**solved_result.values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin = <coroutine object Auth.get_current_admin at 0x7f0fb3b74ee0>

    @staticmethod
    async def get_superadmin(admin: AdminUser = Depends(get_current_admin)) -> AdminUser:
        """
        验证超级管理员权限
    
        参数:
            admin: 当前管理员
        """
>       if admin.role != AdminRole.SUPERADMIN:
E       AttributeError: 'coroutine' object has no attribute 'role'

app/core/auth.py:122: AttributeError
---------------------------- Captured stdout setup -----------------------------
2025-01-22 01:38:30,669 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:30,669 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:30,670 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,670 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:38:30,670 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,671 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:30,671 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,672 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:38:30,672 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,672 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:30,672 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,673 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:38:30,673 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,673 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:30,673 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,674 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:38:30,674 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:30,675 INFO sqlalchemy.engine.Engine 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


2025-01-22 01:38:30,675 INFO sqlalchemy.engine.Engine [no key 0.00009s] ()
2025-01-22 01:38:30,675 INFO sqlalchemy.engine.Engine 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


2025-01-22 01:38:30,676 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:30,676 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


2025-01-22 01:38:30,676 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:30,677 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


2025-01-22 01:38:30,677 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:30,677 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:30,935 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:30,936 INFO sqlalchemy.engine.Engine INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
2025-01-22 01:38:30,936 INFO sqlalchemy.engine.Engine [generated in 0.00016s] ('test_admin', '$2b$12$J8hHhgIgOBlgZeAFb5EwW.hl1.FSNPXnHTcfZ7kdTwZcyf0XhGn6e', 'SUPERADMIN', 1, None)
2025-01-22 01:38:30,937 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:30,937 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:30,938 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
2025-01-22 01:38:30,938 INFO sqlalchemy.engine.Engine [generated in 0.00016s] (1,)
------------------------------ Captured log setup ------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00009s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
INFO     sqlalchemy.engine.Engine:base.py:1843 [generated in 0.00016s] ('test_admin', '$2b$12$J8hHhgIgOBlgZeAFb5EwW.hl1.FSNPXnHTcfZ7kdTwZcyf0XhGn6e', 'SUPERADMIN', 1, None)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [generated in 0.00016s] (1,)
----------------------------- Captured stdout call -----------------------------

=== 测试封禁用户 ===
--------------------------- Captured stdout teardown ---------------------------
2025-01-22 01:38:31,119 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:31,119 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:31,120 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:31,120 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:31,120 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:31,120 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:31,121 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:31,121 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:31,122 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:31,122 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:31,122 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_logs
2025-01-22 01:38:31,122 INFO sqlalchemy.engine.Engine [no key 0.00011s] ()
2025-01-22 01:38:31,123 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_users
2025-01-22 01:38:31,123 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:31,123 INFO sqlalchemy.engine.Engine 
DROP TABLE point_records
2025-01-22 01:38:31,123 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:31,124 INFO sqlalchemy.engine.Engine 
DROP TABLE users
2025-01-22 01:38:31,124 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:31,124 INFO sqlalchemy.engine.Engine COMMIT
---------------------------- Captured log teardown -----------------------------
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_logs
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00011s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE point_records
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
_______________________________ test_unban_user ________________________________

client = <httpx.AsyncClient object at 0x7f0fb31477a0>
admin_token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwiZXhwIjoxNzM3NTExNzExfQ.W8rY2wTNeF1KvjKBj0rXUFWhp6kvhmHZMrLt5lz_4HI'

    @pytest.mark.asyncio
    async def test_unban_user(client, admin_token):
        """测试解封用户"""
        print("\n=== 测试解封用户 ===")
    
        response = await client.put(
            "/admin/users/123456/unban",
            headers={"Authorization": f"Bearer {admin_token}"}
        )
    
        print(f"解封响应状态码: {response.status_code}")
        print(f"响应内容: {response.text}")
    
>       assert response.status_code == 200
E       assert 404 == 200
E        +  where 404 = <Response [404 Not Found]>.status_code

tests/test_admin_endpoints.py:118: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-01-22 01:38:31,126 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:31,127 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:31,127 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:31,127 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:38:31,127 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:31,128 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:31,128 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:31,128 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:38:31,128 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:31,129 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:31,129 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:31,129 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:38:31,129 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:31,130 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:31,130 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:31,130 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:38:31,130 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:31,131 INFO sqlalchemy.engine.Engine 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


2025-01-22 01:38:31,131 INFO sqlalchemy.engine.Engine [no key 0.00009s] ()
2025-01-22 01:38:31,132 INFO sqlalchemy.engine.Engine 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


2025-01-22 01:38:31,132 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:31,133 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


2025-01-22 01:38:31,133 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:31,133 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


2025-01-22 01:38:31,133 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:31,134 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:31,390 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:31,391 INFO sqlalchemy.engine.Engine INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
2025-01-22 01:38:31,391 INFO sqlalchemy.engine.Engine [cached since 0.4549s ago] ('test_admin', '$2b$12$YEr65rOV19CV21w1iBFT/e0jASUh4MX9Blv3IN0b4MQQ0sSnm6N3m', 'SUPERADMIN', 1, None)
2025-01-22 01:38:31,392 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:31,392 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:31,392 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
2025-01-22 01:38:31,392 INFO sqlalchemy.engine.Engine [cached since 0.4544s ago] (1,)
------------------------------ Captured log setup ------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00009s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 0.4549s ago] ('test_admin', '$2b$12$YEr65rOV19CV21w1iBFT/e0jASUh4MX9Blv3IN0b4MQQ0sSnm6N3m', 'SUPERADMIN', 1, None)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 0.4544s ago] (1,)
----------------------------- Captured stdout call -----------------------------

=== 测试解封用户 ===
解封响应状态码: 404
响应内容: {"detail":"Not Found"}
--------------------------- Captured stdout teardown ---------------------------
2025-01-22 01:38:31,398 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:31,398 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:31,399 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:31,399 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:31,399 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:31,399 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:31,400 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:31,400 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:31,400 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:31,400 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:31,401 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_logs
2025-01-22 01:38:31,401 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:31,401 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_users
2025-01-22 01:38:31,401 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:31,402 INFO sqlalchemy.engine.Engine 
DROP TABLE point_records
2025-01-22 01:38:31,402 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:31,402 INFO sqlalchemy.engine.Engine 
DROP TABLE users
2025-01-22 01:38:31,402 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:31,403 INFO sqlalchemy.engine.Engine COMMIT
---------------------------- Captured log teardown -----------------------------
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_logs
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE point_records
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
______________________________ test_adjust_points ______________________________

self = <aiomysql.connection.Connection object at 0x7f0fb3165be0>

    async def _connect(self):
        # TODO: Set close callback
        # raise OperationalError(CR.CR_SERVER_GONE_ERROR,
        # "MySQL server has gone away (%r)" % (e,))
        try:
            if self._unix_socket:
                self._reader, self._writer = await \
                    asyncio.wait_for(
                        _open_unix_connection(
                            self._unix_socket),
                        timeout=self.connect_timeout)
                self.host_info = "Localhost via UNIX socket: " + \
                                 self._unix_socket
                self._secure = True
            else:
>               self._reader, self._writer = await \
                    asyncio.wait_for(
                        _open_connection(
                            self._host,
                            self._port),
                        timeout=self.connect_timeout)

venv/lib/python3.12/site-packages/aiomysql/connection.py:527: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.pyenv/versions/3.12.8/lib/python3.12/asyncio/tasks.py:520: in wait_for
    return await fut
venv/lib/python3.12/site-packages/aiomysql/connection.py:88: in _open_connection
    transport, _ = await loop.create_connection(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=False debug=False>
protocol_factory = <function _open_connection.<locals>.<lambda> at 0x7f0fb3160540>
host = 'localhost', port = 3306

    async def create_connection(
            self, protocol_factory, host=None, port=None,
            *, ssl=None, family=0,
            proto=0, flags=0, sock=None,
            local_addr=None, server_hostname=None,
            ssl_handshake_timeout=None,
            ssl_shutdown_timeout=None,
            happy_eyeballs_delay=None, interleave=None,
            all_errors=False):
        """Connect to a TCP server.
    
        Create a streaming transport connection to a given internet host and
        port: socket family AF_INET or socket.AF_INET6 depending on host (or
        family if specified), socket type SOCK_STREAM. protocol_factory must be
        a callable returning a protocol instance.
    
        This method is a coroutine which will try to establish the connection
        in the background.  When successful, the coroutine returns a
        (transport, protocol) pair.
        """
        if server_hostname is not None and not ssl:
            raise ValueError('server_hostname is only meaningful with ssl')
    
        if server_hostname is None and ssl:
            # Use host as default for server_hostname.  It is an error
            # if host is empty or not set, e.g. when an
            # already-connected socket was passed or when only a port
            # is given.  To avoid this error, you can pass
            # server_hostname='' -- this will bypass the hostname
            # check.  (This also means that if host is a numeric
            # IP/IPv6 address, we will attempt to verify that exact
            # address; this will probably fail, but it is possible to
            # create a certificate for a specific IP address, so we
            # don't judge it here.)
            if not host:
                raise ValueError('You must set server_hostname '
                                 'when using ssl without a host')
            server_hostname = host
    
        if ssl_handshake_timeout is not None and not ssl:
            raise ValueError(
                'ssl_handshake_timeout is only meaningful with ssl')
    
        if ssl_shutdown_timeout is not None and not ssl:
            raise ValueError(
                'ssl_shutdown_timeout is only meaningful with ssl')
    
        if sock is not None:
            _check_ssl_socket(sock)
    
        if happy_eyeballs_delay is not None and interleave is None:
            # If using happy eyeballs, default to interleave addresses by family
            interleave = 1
    
        if host is not None or port is not None:
            if sock is not None:
                raise ValueError(
                    'host/port and sock can not be specified at the same time')
    
            infos = await self._ensure_resolved(
                (host, port), family=family,
                type=socket.SOCK_STREAM, proto=proto, flags=flags, loop=self)
            if not infos:
                raise OSError('getaddrinfo() returned empty list')
    
            if local_addr is not None:
                laddr_infos = await self._ensure_resolved(
                    local_addr, family=family,
                    type=socket.SOCK_STREAM, proto=proto,
                    flags=flags, loop=self)
                if not laddr_infos:
                    raise OSError('getaddrinfo() returned empty list')
            else:
                laddr_infos = None
    
            if interleave:
                infos = _interleave_addrinfos(infos, interleave)
    
            exceptions = []
            if happy_eyeballs_delay is None:
                # not using happy eyeballs
                for addrinfo in infos:
                    try:
                        sock = await self._connect_sock(
                            exceptions, addrinfo, laddr_infos)
                        break
                    except OSError:
                        continue
            else:  # using happy eyeballs
                sock = (await staggered.staggered_race(
                    (
                        # can't use functools.partial as it keeps a reference
                        # to exceptions
                        lambda addrinfo=addrinfo: self._connect_sock(
                            exceptions, addrinfo, laddr_infos
                        )
                        for addrinfo in infos
                    ),
                    happy_eyeballs_delay,
                    loop=self,
                ))[0]  # can't use sock, _, _ as it keeks a reference to exceptions
    
            if sock is None:
                exceptions = [exc for sub in exceptions for exc in sub]
                try:
                    if all_errors:
                        raise ExceptionGroup("create_connection failed", exceptions)
                    if len(exceptions) == 1:
                        raise exceptions[0]
                    else:
                        # If they all have the same str(), raise one.
                        model = str(exceptions[0])
                        if all(str(exc) == model for exc in exceptions):
                            raise exceptions[0]
                        # Raise a combined exception so the user can see all
                        # the various error messages.
>                       raise OSError('Multiple exceptions: {}'.format(
                            ', '.join(str(exc) for exc in exceptions)))
E                           OSError: Multiple exceptions: [Errno 111] Connect call failed ('::1', 3306, 0, 0), [Errno 111] Connect call failed ('127.0.0.1', 3306)

../.pyenv/versions/3.12.8/lib/python3.12/asyncio/base_events.py:1135: OSError

The above exception was the direct cause of the following exception:

self = <sqlalchemy.engine.base.Connection object at 0x7f0fb3165a00>
engine = Engine(mysql+aiomysql://root:***@localhost:3306/coser_bot)
connection = None, _has_events = None, _allow_revalidate = True
_allow_autobegin = True

    def __init__(
        self,
        engine: Engine,
        connection: Optional[PoolProxiedConnection] = None,
        _has_events: Optional[bool] = None,
        _allow_revalidate: bool = True,
        _allow_autobegin: bool = True,
    ):
        """Construct a new Connection."""
        self.engine = engine
        self.dialect = dialect = engine.dialect
    
        if connection is None:
            try:
>               self._dbapi_connection = engine.raw_connection()

venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:3298: in raw_connection
    return self.pool.connect()
venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py:449: in connect
    return _ConnectionFairy._checkout(self)
venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py:1263: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py:712: in checkout
    rec = pool._do_get()
venv/lib/python3.12/site-packages/sqlalchemy/pool/impl.py:179: in _do_get
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/pool/impl.py:177: in _do_get
    return self._create_connection()
venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py:390: in _create_connection
    return _ConnectionRecord(self)
venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py:674: in __init__
    self.__connect()
venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py:900: in __connect
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py:896: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
venv/lib/python3.12/site-packages/sqlalchemy/engine/create.py:646: in connect
    return dialect.connect(*cargs, **cparams)
venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:622: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/mysql/aiomysql.py:270: in connect
    await_only(creator_fn(*arg, **kw)),
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:132: in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:196: in greenlet_spawn
    value = await result
venv/lib/python3.12/site-packages/aiomysql/connection.py:75: in _connect
    await conn._connect()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <aiomysql.connection.Connection object at 0x7f0fb3165be0>

    async def _connect(self):
        # TODO: Set close callback
        # raise OperationalError(CR.CR_SERVER_GONE_ERROR,
        # "MySQL server has gone away (%r)" % (e,))
        try:
            if self._unix_socket:
                self._reader, self._writer = await \
                    asyncio.wait_for(
                        _open_unix_connection(
                            self._unix_socket),
                        timeout=self.connect_timeout)
                self.host_info = "Localhost via UNIX socket: " + \
                                 self._unix_socket
                self._secure = True
            else:
                self._reader, self._writer = await \
                    asyncio.wait_for(
                        _open_connection(
                            self._host,
                            self._port),
                        timeout=self.connect_timeout)
                self._set_keep_alive()
                self._set_nodelay(True)
                self.host_info = "socket %s:%d" % (self._host, self._port)
    
            self._next_seq_id = 0
    
            await self._get_server_information()
            await self._request_authentication()
    
            self.connected_time = self._loop.time()
    
            if self.sql_mode is not None:
                await self.query(f"SET sql_mode={self.sql_mode}")
    
            if self.init_command is not None:
                await self.query(self.init_command)
                await self.commit()
    
            if self.autocommit_mode is not None:
                await self.autocommit(self.autocommit_mode)
        except Exception as e:
            if self._writer:
                self._writer.transport.close()
            self._reader = None
            self._writer = None
    
            # As of 3.11, asyncio.TimeoutError is a deprecated alias of
            # OSError. For consistency, we're also considering this an
            # OperationalError on earlier python versions.
            if isinstance(e, (IOError, OSError, asyncio.TimeoutError)):
>               raise OperationalError(
                    CR.CR_CONN_HOST_ERROR,
                    "Can't connect to MySQL server on %r" % self._host,
                ) from e
E               pymysql.err.OperationalError: (2003, "Can't connect to MySQL server on 'localhost'")

venv/lib/python3.12/site-packages/aiomysql/connection.py:563: OperationalError

The above exception was the direct cause of the following exception:

client = <httpx.AsyncClient object at 0x7f0fb311bbc0>
admin_token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwiZXhwIjoxNzM3NTExNzExfQ.W8rY2wTNeF1KvjKBj0rXUFWhp6kvhmHZMrLt5lz_4HI'

    @pytest.mark.asyncio
    async def test_adjust_points(client, admin_token):
        """测试调整积分"""
        print("\n=== 测试调整积分 ===")
    
>       response = await client.put(
            "/admin/users/123456/points",
            headers={"Authorization": f"Bearer {admin_token}"},
            json={
                "points": -100,  # 减少100积分
                "reason": "测试调整积分"
            }
        )

tests/test_admin_endpoints.py:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.12/site-packages/httpx/_client.py:1896: in put
    return await self.request(
venv/lib/python3.12/site-packages/httpx/_client.py:1540: in request
    return await self.send(request, auth=auth, follow_redirects=follow_redirects)
venv/lib/python3.12/site-packages/httpx/_client.py:1629: in send
    response = await self._send_handling_auth(
venv/lib/python3.12/site-packages/httpx/_client.py:1657: in _send_handling_auth
    response = await self._send_handling_redirects(
venv/lib/python3.12/site-packages/httpx/_client.py:1694: in _send_handling_redirects
    response = await self._send_single_request(request)
venv/lib/python3.12/site-packages/httpx/_client.py:1730: in _send_single_request
    response = await transport.handle_async_request(request)
venv/lib/python3.12/site-packages/httpx/_transports/asgi.py:170: in handle_async_request
    await self.app(scope, receive, send)
venv/lib/python3.12/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
venv/lib/python3.12/site-packages/starlette/applications.py:113: in __call__
    await self.middleware_stack(scope, receive, send)
venv/lib/python3.12/site-packages/starlette/middleware/errors.py:187: in __call__
    raise exc
venv/lib/python3.12/site-packages/starlette/middleware/errors.py:165: in __call__
    await self.app(scope, receive, _send)
venv/lib/python3.12/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    raise exc
venv/lib/python3.12/site-packages/starlette/_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
venv/lib/python3.12/site-packages/starlette/routing.py:715: in __call__
    await self.middleware_stack(scope, receive, send)
venv/lib/python3.12/site-packages/starlette/routing.py:735: in app
    await route.handle(scope, receive, send)
venv/lib/python3.12/site-packages/starlette/routing.py:288: in handle
    await self.app(scope, receive, send)
venv/lib/python3.12/site-packages/starlette/routing.py:76: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    raise exc
venv/lib/python3.12/site-packages/starlette/_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
venv/lib/python3.12/site-packages/starlette/routing.py:73: in app
    response = await f(request)
venv/lib/python3.12/site-packages/fastapi/routing.py:291: in app
    solved_result = await solve_dependencies(
venv/lib/python3.12/site-packages/fastapi/dependencies/utils.py:638: in solve_dependencies
    solved = await call(**solved_result.values)
app/core/auth.py:96: in get_current_admin
    result = await db.execute(query)
venv/lib/python3.12/site-packages/sqlalchemy/ext/asyncio/session.py:463: in execute
    result = await greenlet_spawn(
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:201: in greenlet_spawn
    result = context.throw(*sys.exc_info())
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2365: in execute
    return self._execute_internal(
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2241: in _execute_internal
    conn = self._connection_for_bind(bind)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2110: in _connection_for_bind
    return trans._connection_for_bind(engine, execution_options)
<string>:2: in _connection_for_bind
    ???
venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1189: in _connection_for_bind
    conn = bind.connect()
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:3274: in connect
    return self._connection_cls(self)
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:148: in __init__
    Connection._handle_dbapi_exception_noconnection(
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2439: in _handle_dbapi_exception_noconnection
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:146: in __init__
    self._dbapi_connection = engine.raw_connection()
venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:3298: in raw_connection
    return self.pool.connect()
venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py:449: in connect
    return _ConnectionFairy._checkout(self)
venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py:1263: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py:712: in checkout
    rec = pool._do_get()
venv/lib/python3.12/site-packages/sqlalchemy/pool/impl.py:179: in _do_get
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/pool/impl.py:177: in _do_get
    return self._create_connection()
venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py:390: in _create_connection
    return _ConnectionRecord(self)
venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py:674: in __init__
    self.__connect()
venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py:900: in __connect
    with util.safe_reraise():
venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.12/site-packages/sqlalchemy/pool/base.py:896: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
venv/lib/python3.12/site-packages/sqlalchemy/engine/create.py:646: in connect
    return dialect.connect(*cargs, **cparams)
venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:622: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)
venv/lib/python3.12/site-packages/sqlalchemy/dialects/mysql/aiomysql.py:270: in connect
    await_only(creator_fn(*arg, **kw)),
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:132: in await_only
    return current.parent.switch(awaitable)  # type: ignore[no-any-return,attr-defined] # noqa: E501
venv/lib/python3.12/site-packages/sqlalchemy/util/_concurrency_py3k.py:196: in greenlet_spawn
    value = await result
venv/lib/python3.12/site-packages/aiomysql/connection.py:75: in _connect
    await conn._connect()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <aiomysql.connection.Connection object at 0x7f0fb3165be0>

    async def _connect(self):
        # TODO: Set close callback
        # raise OperationalError(CR.CR_SERVER_GONE_ERROR,
        # "MySQL server has gone away (%r)" % (e,))
        try:
            if self._unix_socket:
                self._reader, self._writer = await \
                    asyncio.wait_for(
                        _open_unix_connection(
                            self._unix_socket),
                        timeout=self.connect_timeout)
                self.host_info = "Localhost via UNIX socket: " + \
                                 self._unix_socket
                self._secure = True
            else:
                self._reader, self._writer = await \
                    asyncio.wait_for(
                        _open_connection(
                            self._host,
                            self._port),
                        timeout=self.connect_timeout)
                self._set_keep_alive()
                self._set_nodelay(True)
                self.host_info = "socket %s:%d" % (self._host, self._port)
    
            self._next_seq_id = 0
    
            await self._get_server_information()
            await self._request_authentication()
    
            self.connected_time = self._loop.time()
    
            if self.sql_mode is not None:
                await self.query(f"SET sql_mode={self.sql_mode}")
    
            if self.init_command is not None:
                await self.query(self.init_command)
                await self.commit()
    
            if self.autocommit_mode is not None:
                await self.autocommit(self.autocommit_mode)
        except Exception as e:
            if self._writer:
                self._writer.transport.close()
            self._reader = None
            self._writer = None
    
            # As of 3.11, asyncio.TimeoutError is a deprecated alias of
            # OSError. For consistency, we're also considering this an
            # OperationalError on earlier python versions.
            if isinstance(e, (IOError, OSError, asyncio.TimeoutError)):
>               raise OperationalError(
                    CR.CR_CONN_HOST_ERROR,
                    "Can't connect to MySQL server on %r" % self._host,
                ) from e
E               sqlalchemy.exc.OperationalError: (pymysql.err.OperationalError) (2003, "Can't connect to MySQL server on 'localhost'")
E               (Background on this error at: https://sqlalche.me/e/20/e3q8)

venv/lib/python3.12/site-packages/aiomysql/connection.py:563: OperationalError
---------------------------- Captured stdout setup -----------------------------
2025-01-22 01:38:31,405 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:31,405 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:31,405 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:31,405 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:38:31,406 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:31,406 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:31,406 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:31,407 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:38:31,407 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:31,407 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:31,407 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:31,408 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:38:31,408 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:31,408 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:31,408 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:31,409 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:38:31,409 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:31,409 INFO sqlalchemy.engine.Engine 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


2025-01-22 01:38:31,409 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:31,410 INFO sqlalchemy.engine.Engine 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


2025-01-22 01:38:31,410 INFO sqlalchemy.engine.Engine [no key 0.00010s] ()
2025-01-22 01:38:31,411 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


2025-01-22 01:38:31,411 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:31,411 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


2025-01-22 01:38:31,412 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:31,412 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:31,677 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:31,678 INFO sqlalchemy.engine.Engine INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
2025-01-22 01:38:31,678 INFO sqlalchemy.engine.Engine [cached since 0.742s ago] ('test_admin', '$2b$12$pwIzA/umCZ/JQsweVqt75OcWCftHfs0DRWGSLxeAFYtbfMKC5DUFu', 'SUPERADMIN', 1, None)
2025-01-22 01:38:31,679 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:31,680 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:31,680 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
2025-01-22 01:38:31,680 INFO sqlalchemy.engine.Engine [cached since 0.7419s ago] (1,)
------------------------------ Captured log setup ------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00010s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 0.742s ago] ('test_admin', '$2b$12$pwIzA/umCZ/JQsweVqt75OcWCftHfs0DRWGSLxeAFYtbfMKC5DUFu', 'SUPERADMIN', 1, None)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 0.7419s ago] (1,)
----------------------------- Captured stdout call -----------------------------

=== 测试调整积分 ===

=== 验证管理员令牌 ===
令牌: eyJhbGciOiJIUzI1NiIs...
开始验证令牌...
解析的管理员ID: 1
查询管理员信息...
--------------------------- Captured stdout teardown ---------------------------
2025-01-22 01:38:32,392 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:32,392 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:32,393 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:32,393 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:32,393 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:32,393 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:32,394 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:32,394 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:32,395 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:32,395 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:32,395 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_logs
2025-01-22 01:38:32,395 INFO sqlalchemy.engine.Engine [no key 0.00010s] ()
2025-01-22 01:38:32,396 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_users
2025-01-22 01:38:32,396 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:32,396 INFO sqlalchemy.engine.Engine 
DROP TABLE point_records
2025-01-22 01:38:32,397 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:32,397 INFO sqlalchemy.engine.Engine 
DROP TABLE users
2025-01-22 01:38:32,397 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:32,398 INFO sqlalchemy.engine.Engine COMMIT
---------------------------- Captured log teardown -----------------------------
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_logs
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00010s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE point_records
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
_____________________________ test_get_user_stats ______________________________

client = <httpx.AsyncClient object at 0x7f0fb311ba70>
admin_token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwiZXhwIjoxNzM3NTExNzEyfQ.GGazb9SAIdJ7utvb4P-3xjjQc8W4kr8gfidhsp9CIag'

    @pytest.mark.asyncio
    async def test_get_user_stats(client, admin_token):
        """测试获取用户统计"""
        response = await client.get(
            "/admin/stats/users",
            headers={"Authorization": f"Bearer {admin_token}"}
        )
>       assert response.status_code == 200
E       assert 404 == 200
E        +  where 404 = <Response [404 Not Found]>.status_code

tests/test_admin_endpoints.py:152: AssertionError
---------------------------- Captured stdout setup -----------------------------
2025-01-22 01:38:32,400 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:32,400 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:32,400 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:32,401 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("users")
2025-01-22 01:38:32,401 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:32,401 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:32,401 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:32,402 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("point_records")
2025-01-22 01:38:32,402 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:32,402 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:32,402 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:32,403 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_users")
2025-01-22 01:38:32,403 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:32,403 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:32,403 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:32,404 INFO sqlalchemy.engine.Engine PRAGMA temp.table_info("admin_logs")
2025-01-22 01:38:32,404 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:32,405 INFO sqlalchemy.engine.Engine 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


2025-01-22 01:38:32,405 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:32,405 INFO sqlalchemy.engine.Engine 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


2025-01-22 01:38:32,405 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:32,406 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


2025-01-22 01:38:32,406 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:32,407 INFO sqlalchemy.engine.Engine 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


2025-01-22 01:38:32,407 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:32,407 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:32,664 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:32,664 INFO sqlalchemy.engine.Engine INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
2025-01-22 01:38:32,664 INFO sqlalchemy.engine.Engine [cached since 1.729s ago] ('test_admin', '$2b$12$hOyBKAnU8ralSAau1p27c.Sc7fO3L4g5Frjzkvfd9LtZP4VdqYJ0i', 'SUPERADMIN', 1, None)
2025-01-22 01:38:32,665 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:32,666 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:32,666 INFO sqlalchemy.engine.Engine SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
2025-01-22 01:38:32,666 INFO sqlalchemy.engine.Engine [cached since 1.728s ago] (1,)
------------------------------ Captured log setup ------------------------------
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA temp.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE users (
	id INTEGER NOT NULL, 
	telegram_id VARCHAR(32) NOT NULL, 
	email VARCHAR(128), 
	status INTEGER, 
	points INTEGER, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (telegram_id), 
	UNIQUE (email)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE point_records (
	id INTEGER NOT NULL, 
	user_id INTEGER NOT NULL, 
	points INTEGER NOT NULL, 
	type INTEGER NOT NULL, 
	description VARCHAR(255), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_users (
	id INTEGER NOT NULL, 
	username VARCHAR(50) NOT NULL, 
	password_hash VARCHAR(255) NOT NULL, 
	role VARCHAR(10) NOT NULL, 
	is_active BOOLEAN, 
	last_login TIMESTAMP, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	UNIQUE (username)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
CREATE TABLE admin_logs (
	id INTEGER NOT NULL, 
	admin_id INTEGER NOT NULL, 
	action VARCHAR(50) NOT NULL, 
	target_type VARCHAR(50) NOT NULL, 
	target_id VARCHAR(50) NOT NULL, 
	details VARCHAR(500), 
	ip_address VARCHAR(50), 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(admin_id) REFERENCES admin_users (id)
)


INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 INSERT INTO admin_users (username, password_hash, role, is_active, last_login) VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.729s ago] ('test_admin', '$2b$12$hOyBKAnU8ralSAau1p27c.Sc7fO3L4g5Frjzkvfd9LtZP4VdqYJ0i', 'SUPERADMIN', 1, None)
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 SELECT admin_users.id, admin_users.username, admin_users.password_hash, admin_users.role, admin_users.is_active, admin_users.last_login, admin_users.created_at, admin_users.updated_at 
FROM admin_users 
WHERE admin_users.id = ?
INFO     sqlalchemy.engine.Engine:base.py:1843 [cached since 1.728s ago] (1,)
--------------------------- Captured stdout teardown ---------------------------
2025-01-22 01:38:32,672 INFO sqlalchemy.engine.Engine COMMIT
2025-01-22 01:38:32,673 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-01-22 01:38:32,673 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("users")
2025-01-22 01:38:32,673 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:32,674 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("point_records")
2025-01-22 01:38:32,674 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:32,674 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_users")
2025-01-22 01:38:32,674 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:32,675 INFO sqlalchemy.engine.Engine PRAGMA main.table_info("admin_logs")
2025-01-22 01:38:32,675 INFO sqlalchemy.engine.Engine [raw sql] ()
2025-01-22 01:38:32,676 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_logs
2025-01-22 01:38:32,676 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:32,676 INFO sqlalchemy.engine.Engine 
DROP TABLE admin_users
2025-01-22 01:38:32,676 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:32,677 INFO sqlalchemy.engine.Engine 
DROP TABLE point_records
2025-01-22 01:38:32,677 INFO sqlalchemy.engine.Engine [no key 0.00007s] ()
2025-01-22 01:38:32,677 INFO sqlalchemy.engine.Engine 
DROP TABLE users
2025-01-22 01:38:32,677 INFO sqlalchemy.engine.Engine [no key 0.00008s] ()
2025-01-22 01:38:32,678 INFO sqlalchemy.engine.Engine COMMIT
---------------------------- Captured log teardown -----------------------------
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:2699 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("point_records")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_users")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 PRAGMA main.table_info("admin_logs")
INFO     sqlalchemy.engine.Engine:base.py:1843 [raw sql] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_logs
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE admin_users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE point_records
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00007s] ()
INFO     sqlalchemy.engine.Engine:base.py:1843 
DROP TABLE users
INFO     sqlalchemy.engine.Engine:base.py:1843 [no key 0.00008s] ()
INFO     sqlalchemy.engine.Engine:base.py:2705 COMMIT
________________________________ test_mute_user ________________________________

group_service = <app.services.group_management.GroupManagementService object at 0x7f0fb3147c50>

    @pytest.mark.asyncio
    async def test_mute_user(group_service):
        """测试禁言用户"""
>       success = await group_service.mute_user(
            chat_id=123456,
            user_id=789012,
            duration=30,
            reason="测试禁言"
        )

tests/test_group_management.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <app.services.group_management.GroupManagementService object at 0x7f0fb3147c50>
chat_id = 123456, user_id = 789012, duration = 30, reason = '测试禁言'

    async def mute_user(
        self,
        chat_id: int,
        user_id: int,
        duration: Optional[int] = None,
        reason: str = ""
    ) -> bool:
        """
        禁言用户
    
        参数:
            chat_id: 群组ID
            user_id: 用户ID
            duration: 禁言时长（分钟），None表示永久
            reason: 禁言原因
        """
        try:
            # 设置禁言权限
>           permissions = ChatPermissions(
                can_send_messages=False,
                can_send_media_messages=False,
                can_send_polls=False,
                can_send_other_messages=False,
                can_add_web_page_previews=False,
                can_invite_users=False
            )
E           TypeError: ChatPermissions.__init__() got an unexpected keyword argument 'can_send_media_messages'

app/services/group_management.py:41: TypeError
_______________________________ test_unmute_user _______________________________

group_service = <app.services.group_management.GroupManagementService object at 0x7f0fb31644d0>

    @pytest.mark.asyncio
    async def test_unmute_user(group_service):
        """测试解除禁言"""
>       success = await group_service.unmute_user(
            chat_id=123456,
            user_id=789012,
            reason="测试解除禁言"
        )

tests/test_group_management.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <app.services.group_management.GroupManagementService object at 0x7f0fb31644d0>
chat_id = 123456, user_id = 789012, reason = '测试解除禁言'

    async def unmute_user(
        self,
        chat_id: int,
        user_id: int,
        reason: str = ""
    ) -> bool:
        """
        解除用户禁言
    
        参数:
            chat_id: 群组ID
            user_id: 用户ID
            reason: 解除原因
        """
        try:
            # 恢复默认权限
>           permissions = ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_polls=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True,
                can_invite_users=True
            )
E           TypeError: ChatPermissions.__init__() got an unexpected keyword argument 'can_send_media_messages'

app/services/group_management.py:97: TypeError
=============================== warnings summary ===============================
venv/lib/python3.12/site-packages/passlib/utils/__init__.py:854
  /home/ubuntu/coser_bot/venv/lib/python3.12/site-packages/passlib/utils/__init__.py:854: DeprecationWarning: 'crypt' is deprecated and slated for removal in Python 3.13
    from crypt import crypt as _crypt

venv/lib/python3.12/site-packages/pydantic/_internal/_config.py:295
venv/lib/python3.12/site-packages/pydantic/_internal/_config.py:295
  /home/ubuntu/coser_bot/venv/lib/python3.12/site-packages/pydantic/_internal/_config.py:295: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

app/db/database.py:35
  /home/ubuntu/coser_bot/app/db/database.py:35: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

tests/test_admin_auth.py::test_login
tests/test_admin_auth.py::test_get_admin_info
tests/test_admin_auth.py::test_logout
  /home/ubuntu/coser_bot/app/core/auth.py:48: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    expire = datetime.utcnow() + expires_delta

tests/test_admin_auth.py::test_login
tests/test_admin_auth.py::test_get_admin_info
tests/test_admin_auth.py::test_logout
  /home/ubuntu/coser_bot/app/routers/admin.py:58: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    admin.last_login = datetime.utcnow()

tests/test_admin_auth.py::test_get_admin_info
tests/test_admin_auth.py::test_logout
tests/test_admin_endpoints.py::test_adjust_points
  /home/ubuntu/coser_bot/venv/lib/python3.12/site-packages/jose/jwt.py:311: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    now = timegm(datetime.utcnow().utctimetuple())

tests/test_admin_auth.py::test_logout
  /home/ubuntu/coser_bot/app/core/auth.py:143: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    ttl = exp - datetime.utcnow().timestamp()

tests/test_admin_endpoints.py::test_ban_user
tests/test_admin_endpoints.py::test_unban_user
tests/test_admin_endpoints.py::test_adjust_points
tests/test_admin_endpoints.py::test_get_user_stats
  /home/ubuntu/coser_bot/app/core/auth.py:50: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    expire = datetime.utcnow() + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_admin_auth.py::test_login_invalid_credentials - AssertionError: 错误消息不符合预期
FAILED tests/test_admin_auth.py::test_get_admin_info - AssertionError: 获取管理员信息失败
FAILED tests/test_admin_endpoints.py::test_ban_user - AttributeError: 'coroutine' object has no attribute 'role'
FAILED tests/test_admin_endpoints.py::test_unban_user - assert 404 == 200
FAILED tests/test_admin_endpoints.py::test_adjust_points - sqlalchemy.exc.OperationalError: (pymysql.err.OperationalError) (2003, "Can...
FAILED tests/test_admin_endpoints.py::test_get_user_stats - assert 404 == 200
FAILED tests/test_group_management.py::test_mute_user - TypeError: ChatPermissions.__init__() got an unexpected keyword argument 'c...
FAILED tests/test_group_management.py::test_unmute_user - TypeError: ChatPermissions.__init__() got an unexpected keyword argument 'c...
ERROR tests/test_admin_auth.py::test_login - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: ...
ERROR tests/test_admin_auth.py::test_login_invalid_credentials - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: ...
ERROR tests/test_admin_auth.py::test_get_admin_info - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: ...
ERROR tests/test_admin_auth.py::test_logout - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: ...
============== 8 failed, 3 passed, 18 warnings, 4 errors in 7.25s ==============
